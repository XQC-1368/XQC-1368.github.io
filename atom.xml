<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XQC1368的emo小屋</title>
  
  <subtitle>嬛嬛，朕emo啦！！</subtitle>
  <link href="https://xqc-1368.github.io/atom.xml" rel="self"/>
  
  <link href="https://xqc-1368.github.io/"/>
  <updated>2024-08-17T14:32:09.030Z</updated>
  <id>https://xqc-1368.github.io/</id>
  
  <author>
    <name>XQC1368</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10 数位DP：数字计数</title>
    <link href="https://xqc-1368.github.io/2024/08/17/10%20%E6%95%B0%E4%BD%8DDP%EF%BC%9A%E6%95%B0%E5%AD%97%E8%AE%A1%E6%95%B0/"/>
    <id>https://xqc-1368.github.io/2024/08/17/10%20%E6%95%B0%E4%BD%8DDP%EF%BC%9A%E6%95%B0%E5%AD%97%E8%AE%A1%E6%95%B0/</id>
    <published>2024-08-17T06:53:17.229Z</published>
    <updated>2024-08-17T14:32:09.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="10数位DP：数字计数"><a href="#10数位DP：数字计数" class="headerlink" title="10数位DP：数字计数"></a>10数位DP：数字计数</h2><h1 id="ZJOI2010-数字计数"><a href="#ZJOI2010-数字计数" class="headerlink" title="[ZJOI2010] 数字计数"></a>[ZJOI2010] 数字计数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个正整数 $a$ 和 $b$，求在 $[a,b]$ 中的所有整数中，每个数码(digit)各出现了多少次。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>仅包含一行两个整数 $a,b$，含义如上所述。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>包含一行十个整数，分别表示 $0\sim 9$ 在 $[a,b]$ 中出现了多少次。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 99</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9 20 20 20 20 20 20 20 20 20</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><ul><li>对于 $30\%$ 的数据，保证 $a\le b\le10^6$；</li><li>对于 $100\%$ 的数据，保证 $1\le a\le b\le 10^{12}$。</li></ul><p>数位DP主要通过记忆化搜索实现，记忆化搜索的本质就是把条件对应的结论记下来，相同条件一定最后对应相同的结论，条件的个数也就决定了DP的维数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long<span class="comment">//注意都要开long long</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> ay[<span class="number">20</span>];</span><br><span class="line"><span class="comment">//ay来存这个数每个位子上的数码，倒序存放</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">20</span>][<span class="number">2</span>][<span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//zero=1表示前面是否全部都是前导零</span></span><br><span class="line"><span class="comment">//limit=1 表示前面对本位有没有限制</span></span><br><span class="line"><span class="comment">//即：前面都是贴着放的为1，前面某一位不是贴着放的，为0；</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">记忆化搜索。</span></span><br><span class="line"><span class="comment">pos是当前为从高到低位置。limit表示当前位之前的所有位置是否和ay[pos]相等，</span></span><br><span class="line"><span class="comment">                                                    1是相等，0是不相等。</span></span><br><span class="line"><span class="comment">sum表示当前数字出现的次数。zero表示之前是否都是前导0。target是当前在算的数码。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> limit,<span class="type">int</span> sum,<span class="type">int</span> zero,<span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos==<span class="number">0</span>)<span class="keyword">return</span> sum;<span class="comment">//递归终止条件</span></span><br><span class="line">    <span class="keyword">if</span>(dp[pos][limit][sum][zero]!=<span class="number">-1</span>)<span class="keyword">return</span> dp[pos][limit][sum][zero];</span><br><span class="line">    <span class="comment">//记搜检索：检索是否已经被记录</span></span><br><span class="line">    <span class="type">int</span> maxnum=limit?ay[pos]:<span class="number">9</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   由于我们是从高位到低位枚举的，所以如果之前一位的数码和最大数的数码相同，</span></span><br><span class="line"><span class="comment">   这一位就只能枚举到ay[pos]；</span></span><br><span class="line"><span class="comment">   否则如果之前一位比最大数的数码小，那这一位就可以从0~9枚举了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=maxnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret+=<span class="built_in">dfs</span>(pos<span class="number">-1</span>,limit &amp;&amp;(i==maxnum),sum+((i==target) &amp;&amp; (i||!zero)),zero &amp;&amp; (i==<span class="number">0</span>),target);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        继续搜索，数位减一（到下一个位置，倒序存储，从高位到低位），</span></span><br><span class="line"><span class="comment">        limit的更新要看之前有没有相等，且这一位有没有相等；</span></span><br><span class="line"><span class="comment">        sum的更新要看之前是否为前导0或者这一位不是0；</span></span><br><span class="line"><span class="comment">        zero的更新就看之前是否为前导0且这一位继续为0；</span></span><br><span class="line"><span class="comment">        target继续传进去。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    dp[pos][limit][sum][zero]=ret;<span class="comment">//记忆化，把搜到的都记下来</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">part</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        ay[++len]=a%<span class="number">10</span>;</span><br><span class="line">        a/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);<span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">dfs</span>(len,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,d);</span><br><span class="line"> <span class="comment">//开始在第len位上，最高位只能枚举到ay[pos]所以limit是0，sum=0，有前导0。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">part</span>(b,i)-<span class="built_in">part</span>(a<span class="number">-1</span>,i)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看一道题：</p><h1 id="SCOI2009-windy-数"><a href="#SCOI2009-windy-数" class="headerlink" title="[SCOI2009] windy 数"></a>[SCOI2009] windy 数</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>windy 定义了一种 windy 数。</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>不含前导零且相邻两个数字之差至少为 $2$ 的正整数被称为 windy 数。windy 想知道，在 $a$ 和 $b$ 之间，包括 $a$ 和 $b$ ，总共有多少个 windy 数？</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行两个整数，分别表示 $a$ 和 $b$。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数表示答案。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 10</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25 50</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定-1"><a href="#数据规模与约定-1" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于全部的测试点，保证 $1 \leq a \leq b \leq 2 \times 10^9$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> ay[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//dp[i][j]表示搜到第i位，前一位是j，的！limit方案totnum；</span></span><br><span class="line"><span class="comment">//zero=1表示前面是否全部都是前导零</span></span><br><span class="line"><span class="comment">//limit=1 表示前面对本位有没有限制</span></span><br><span class="line"><span class="comment">//即：前面都是贴着放的为1，前面某一位不是贴着放的，为0；</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> prenum,<span class="type">int</span> st,<span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//pos当前位置,pre前一位数,st判断前面是否全是0,limit最高位限制</span></span><br><span class="line">    <span class="keyword">if</span>(pos&gt;len)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//搜完了 </span></span><br><span class="line">    <span class="keyword">if</span>(limit==<span class="number">0</span> &amp;&amp; dp[pos][prenum]!=<span class="number">-1</span>)<span class="keyword">return</span> dp[pos][prenum];</span><br><span class="line">    <span class="comment">//没有最高位限制且已经搜过了</span></span><br><span class="line">    <span class="type">int</span> maxnum=limit?ay[len<span class="number">+1</span>-pos]:<span class="number">9</span>;<span class="comment">//当前位最大数字 </span></span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=maxnum;i++)<span class="comment">//从0枚举到最大数字 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(i-prenum)&lt;<span class="number">2</span>)<span class="keyword">continue</span>;<span class="comment">//不符合题意，继续</span></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; st==<span class="number">1</span>)ret+=<span class="built_in">dfs</span>(pos<span class="number">+1</span>,<span class="number">-2</span>,st,limit &amp;&amp; (i==maxnum));</span><br><span class="line">        <span class="comment">//如果有前导0，下一位随意 </span></span><br><span class="line">        <span class="keyword">else</span> ret+=<span class="built_in">dfs</span>(pos<span class="number">+1</span>,i,<span class="number">0</span>,limit &amp;&amp; (i==maxnum));</span><br><span class="line">        <span class="comment">//如果没有前导0，继续按部就班地搜 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(limit==<span class="number">0</span> &amp;&amp; st==<span class="number">0</span>)dp[pos][prenum]=ret;</span><br><span class="line"><span class="comment">//没有最高位限制且没有前导0时记录结果 ，至于为什么要这样，我也不知道，其实可以都记下来的</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">part</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        ay[++len]=a%<span class="number">10</span>;</span><br><span class="line">        a/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="built_in">sizeof</span> (dp));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">part</span>(b)-<span class="built_in">part</span>(a<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咱就主打一个看注释吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;10数位DP：数字计数&quot;&gt;&lt;a href=&quot;#10数位DP：数字计数&quot; class=&quot;headerlink&quot; title=&quot;10数位DP：数字计数&quot;&gt;&lt;/a&gt;10数位DP：数字计数&lt;/h2&gt;&lt;h1 id=&quot;ZJOI2010-数字计数&quot;&gt;&lt;a href=&quot;#ZJOI</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="数位DP" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="数位DP" scheme="https://xqc-1368.github.io/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
  </entry>
  
  <entry>
    <title>09 区间DP的博弈论模型： Letter Picking</title>
    <link href="https://xqc-1368.github.io/2024/08/17/09%20%E5%8C%BA%E9%97%B4DP%E7%9A%84%E5%8D%9A%E5%BC%88%E8%AE%BA%E6%A8%A1%E5%9E%8B%EF%BC%9A%20Letter%20Picking/"/>
    <id>https://xqc-1368.github.io/2024/08/17/09%20%E5%8C%BA%E9%97%B4DP%E7%9A%84%E5%8D%9A%E5%BC%88%E8%AE%BA%E6%A8%A1%E5%9E%8B%EF%BC%9A%20Letter%20Picking/</id>
    <published>2024-08-17T06:53:17.224Z</published>
    <updated>2024-08-17T14:31:59.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区间DP的博弈论模型：-Letter-Picking"><a href="#区间DP的博弈论模型：-Letter-Picking" class="headerlink" title="区间DP的博弈论模型： Letter Picking"></a>区间DP的博弈论模型： Letter Picking</h2><h1 id="Letter-Picking"><a href="#Letter-Picking" class="headerlink" title="Letter Picking"></a>Letter Picking</h1><h2 id="题面翻译"><a href="#题面翻译" class="headerlink" title="题面翻译"></a>题面翻译</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Alice 和 Bob 在玩游戏。</p><p>给出一个长度为偶数的，非空的且仅含小写字母的字符串 $s$。每个玩家还拥有一个初始为空的字符串。</p><p>Alice 先手，两名玩家交替行动。在一次行动中，玩家可以取 $s$ 首或尾字符，将其从 $s$ 中移除后加入到自己的字符串的 <strong>最前面</strong>。</p><p>当 $s$ 为空时游戏结束，拥有字典序更小的字符串的玩家获胜。若两名玩家的字符串相等则平局。</p><p>若 Alice 和 Bob 都足够聪明，判断谁会取胜，或者游戏为平局。</p><p>数据组数 $t\leq 10^3$，$\sum|s|\leq 2\times 10^3$。保证所有输入的 $|s|$ 长度都为偶数。</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>Alice and Bob are playing a game. Initially, they are given a non-empty string $s$ , consisting of lowercase Latin letters. The length of the string is even. Each player also has a string of their own, initially empty.</p><p>Alice starts, then they alternate moves. In one move, a player takes either the first or the last letter of the string $s$ , removes it from $s$ and prepends (adds to the beginning) it to their own string.</p><p>The game ends when the string $s$ becomes empty. The winner is the player with a lexicographically smaller string. If the players’ strings are equal, then it’s a draw.</p><p>A string $a$ is lexicographically smaller than a string $b$ if there exists such position $i$ that $a_j = b_j$ for all $j &lt; i$ and $a_i &lt; b_i$ .</p><p>What is the result of the game if both players play optimally (e. g. both players try to win; if they can’t, then try to draw)?</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>The first line contains a single integer $t$ ( $1 \le t \le 1000$ ) — the number of testcases.</p><p>Each testcase consists of a single line — a non-empty string $s$ , consisting of lowercase Latin letters. The length of the string $s$ is even.</p><p>The total length of the strings over all testcases doesn’t exceed $2000$ .</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>For each testcase, print the result of the game if both players play optimally. If Alice wins, print “Alice”. If Bob wins, print “Bob”. If it’s a draw, print “Draw”.</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">forces</span><br><span class="line">abba</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Alice</span><br><span class="line">Draw</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>One of the possible games Alice and Bob can play in the first testcase:</p><ol><li>Alice picks the first letter in $s$ : $s=$ “orces”, $a=$ “f”, $b=$ “”;</li><li>Bob picks the last letter in $s$ : $s=$ “orce”, $a=$ “f”, $b=$ “s”;</li><li>Alice picks the last letter in $s$ : $s=$ “orc”, $a=$ “ef”, $b=$ “s”;</li><li>Bob picks the first letter in $s$ : $s=$ “rc”, $a=$ “ef”, $b=$ “os”;</li><li>Alice picks the last letter in $s$ : $s=$ “r”, $a=$ “cef”, $b=$ “os”;</li><li>Bob picks the remaining letter in $s$ : $s=$ “”, $a=$ “cef”, $b=$ “ros”.</li></ol><p>Alice wins because “cef” &lt; “ros”. Neither of the players follows any strategy in this particular example game, so it doesn’t show that Alice wins if both play optimally.</p><p>定义状态：</p><p>对于区间i~j，博弈后的结果，记1为先手胜，0为先手平，-1为先手负</p><p>考虑先手：<br><img src="/images/2023-11-15-13-12-58-考虑先手.png" alt=""></p><p>以上为先手必获胜的结果，当先手出招时候，后手想使用反制手段，但是发现后手的每一种选择都是使结果导向先手方胜利，那么后手方没办法只能输；</p><p>接下来讨论先手出招，但后手通过反制手段，但因为选择当中没有使后手方获胜的情况，但存在若干个平手的情况，于是后手方退而求其次，使最终结果导向平局的情况；</p><p>当然这里讨论的是先手不输的情况，先手不输的情况包括先手赢和先手平两种，如果用if+先手赢+else if+先手不输 来把先手赢的情况再第二种情况之前拒之门外，那么第二种情况就是先手不输的情况</p><p>即为</p><p><img src="/images/2023-11-15-13-26-10-考虑先手%20(2" alt="">.png)</p><p>附上代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">2005</span>][<span class="number">2005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">solve</span><span class="params">(<span class="built_in">string</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = s.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>; j &lt;= n; i++, j++) <span class="comment">// 1 start</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[j])</span><br><span class="line">            dp[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dp[i][j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">2</span>; <span class="number">2</span> * k &lt;= n; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">2</span> * k; j &lt;= n; i++, j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((s[i] &lt; s[i + <span class="number">1</span>] &amp;&amp; dp[i + <span class="number">2</span>][j] == <span class="number">0</span> || dp[i + <span class="number">2</span>][j] == <span class="number">1</span>) </span><br><span class="line">            &amp;&amp; (dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; s[i] &lt; s[j] || dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">1</span>)  </span><br><span class="line">            || (s[j] &lt; s[j - <span class="number">1</span>] &amp;&amp; dp[i][j - <span class="number">2</span>] == <span class="number">0</span> || dp[i][j - <span class="number">2</span>] == <span class="number">1</span>)</span><br><span class="line">            &amp;&amp; (dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; s[j] &lt; s[i] || dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line">            (((s[i] &lt;= s[i + <span class="number">1</span>] &amp;&amp; dp[i + <span class="number">2</span>][j] == <span class="number">0</span> || dp[i + <span class="number">2</span>][j] == <span class="number">1</span>) </span><br><span class="line">            &amp;&amp; (dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; s[i] &lt;= s[j] || dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">1</span>))</span><br><span class="line">            || (s[j] &lt;= s[j - <span class="number">1</span>] &amp;&amp; dp[i][j - <span class="number">2</span>] == <span class="number">0</span> || dp[i][j - <span class="number">2</span>] == <span class="number">1</span>) </span><br><span class="line">            &amp;&amp; (dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; s[j] &lt;= s[i] || dp[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for(int j=1;j&lt;=n;j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         cout&lt;&lt;dp[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> temp, s = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        s += temp;</span><br><span class="line">        <span class="type">int</span> ans = solve(s);</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Draw&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Alice&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Bob&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;区间DP的博弈论模型：-Letter-Picking&quot;&gt;&lt;a href=&quot;#区间DP的博弈论模型：-Letter-Picking&quot; class=&quot;headerlink&quot; title=&quot;区间DP的博弈论模型： Letter Picking&quot;&gt;&lt;/a&gt;区间DP的博弈论</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="区间DP" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/"/>
    
    <category term="博弈论" scheme="https://xqc-1368.github.io/categories/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="区间DP" scheme="https://xqc-1368.github.io/tags/%E5%8C%BA%E9%97%B4DP/"/>
    
    <category term="博弈论" scheme="https://xqc-1368.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>08 四边形不等式优化的环形DP：石子合并</title>
    <link href="https://xqc-1368.github.io/2024/08/17/08%20%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%98%E5%8C%96%E7%9A%84%E7%8E%AF%E5%BD%A2DP%EF%BC%9A%20%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/"/>
    <id>https://xqc-1368.github.io/2024/08/17/08%20%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%98%E5%8C%96%E7%9A%84%E7%8E%AF%E5%BD%A2DP%EF%BC%9A%20%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/</id>
    <published>2024-08-17T06:53:17.221Z</published>
    <updated>2024-08-17T14:32:04.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环形DP-四边形不等式优化的区间DP：石子合并"><a href="#环形DP-四边形不等式优化的区间DP：石子合并" class="headerlink" title="环形DP+四边形不等式优化的区间DP：石子合并"></a>环形DP+四边形不等式优化的区间DP：石子合并</h2><h1 id="NOI1995-石子合并"><a href="#NOI1995-石子合并" class="headerlink" title="[NOI1995] 石子合并"></a>[NOI1995] 石子合并</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个圆形操场的四周摆放 $N$ 堆石子，现要将石子有次序地合并成一堆，规定每次只能选相邻的 $2$ 堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分。</p><p>试设计出一个算法,计算出将 $N$ 堆石子合并成 $1$ 堆的最小得分和最大得分。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>数据的第 $1$ 行是正整数 $N$，表示有 $N$ 堆石子。</p><p>第 $2$ 行有 $N$ 个整数，第 $i$ 个整数 $a_i$ 表示第 $i$ 堆石子的个数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 $2$ 行，第 $1$ 行为最小得分，第 $2$ 行为最大得分。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4 5 9 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">43</span><br><span class="line">54</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$1\leq N\leq 100$，$0\leq a_i\leq 20$。</p><p>考虑的难点主要有两个：</p><p>1.区间dp处理环形dp的思路是什么？</p><p>2.区间dp的优化方法：四边形不等式；</p><p>先解决问题1：</p><p>环形dp的处理方法就是将原来的数组扩充两倍，将n+1项写成第1项，将n+2项写成第2项······以此类推。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,stone[<span class="number">500</span>],pre[<span class="number">500</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;stone[i];</span><br><span class="line">        stone[i+n]=stone[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]=pre[i<span class="number">-1</span>]+stone[i];</span><br><span class="line">        <span class="comment">//cout&lt;&lt;pre[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;endl;</span></span><br></pre></td></tr></table></figure><p>以n=4为例，最后要输出的是</p><p> dp[1][4]，dp[2][5]，dp[3][6]，dp[4][7]，dp[5][8]的最小值/最大值，即所有长度为n的区间的最值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> minn=INT_MAX,maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=n;j&lt;=<span class="number">2</span>*n;i++,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        minn=min(minn,dpmin[i][j]);</span><br><span class="line">        maxn=max(maxn,dp[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;minn&lt;&lt;<span class="built_in">endl</span>&lt;&lt;maxn&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>再解决问题2：<br>先介绍方法：</p><p><img src="/images/2023-11-06-18-51-26-image.png" alt=""></p><p><img src="/images/2023-11-06-18-51-50-image.png" alt=""></p><p><img src="/images/2023-11-06-18-51-10-image.png" alt=""></p><p><img src="/images/2023-11-06-18-52-49-image.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    m[i][i] = i; <span class="comment">// 初始化边界决策点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">2</span>; d &lt;= n; ++d)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r = d; r &lt;= n; ++l，++ r)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[l][r] = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = m[l][r - <span class="number">1</span>]; k &lt;= m[l + <span class="number">1</span>][r];++k) </span><br><span class="line">        <span class="comment">// 利用结论，缩小了枚举范围</span></span><br><span class="line">            <span class="keyword">if</span> (dp[l][k] + dp[k + <span class="number">1</span>][r] + w(l, r) &lt; dp[l][r])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[l][r] = dp[l][k] + dp[k + <span class="number">1</span>][r] + w(l, r); </span><br><span class="line">                <span class="comment">// 更新dp数组</span></span><br><span class="line">                m[l][r] = k; </span><br><span class="line">                <span class="comment">// 更新决策点</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运用最优决策点的关系，可以实现优化。</p><p>然而，我们由上面的文章可以看到，四边形不等式的使用条件其一是w（l，r）满足区间单调性，这个只能数学证明，而且很容易看出来。</p><p><img src="/images/2023-11-06-18-58-09-image.png" alt=""></p><p>其二是，m这个用于标记最佳决策点的数组，在每一行，每一列上都实现单调不下降。本题中，求最大值的时候，m数组不符合这个条件（怎么发现的呢，假设符合条件，然后敲一遍代码，敲完后把m数组打印出来结果如下）<br><img src="/images/2023-11-06-19-00-44-image.png" alt=""></p><p>于是就不符合，只能使用简单的区间dp完成。</p><p>而求最小值的时候，m数组符合这个条件（运行截图如下），于是就可以使用四边形不等式<br><img src="/images/2023-11-06-19-02-47-image.png" alt=""></p><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">500</span>][<span class="number">500</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dpmin[<span class="number">500</span>][<span class="number">500</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> m[<span class="number">500</span>][<span class="number">500</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> m1[<span class="number">500</span>][<span class="number">500</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,stone[<span class="number">500</span>],pre[<span class="number">500</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;stone[i];</span><br><span class="line">        stone[i+n]=stone[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]=pre[i<span class="number">-1</span>]+stone[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//m数组初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        m[i][i]=i;</span><br><span class="line">        m1[i][i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e=<span class="number">2</span>;e&lt;=<span class="number">2</span>*n;e++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=e;j&lt;=<span class="number">2</span>*n;i++,j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dpmin[i][j]=INT_MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=j<span class="number">-1</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i][k]+dp[k+<span class="number">1</span>][j]+pre[j]-pre[i<span class="number">-1</span>]&gt;dp[i][j] &amp;&amp; k+<span class="number">1</span>&lt;=j &amp;&amp; i&lt;=k)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j]=dp[i][k]+dp[k+<span class="number">1</span>][j]+pre[j]-pre[i<span class="number">-1</span>];</span><br><span class="line">                    m[i][j]=k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = m1[i][j - <span class="number">1</span>]; k &lt;= m1[i + <span class="number">1</span>][j]; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dpmin[i][k] + dpmin[k + <span class="number">1</span>][j] + pre[j] - pre[i - <span class="number">1</span>] &lt; dpmin[i][j] &amp;&amp; k + <span class="number">1</span> &lt;= j &amp;&amp; i &lt;= k)</span><br><span class="line">                &#123;</span><br><span class="line">                    dpmin[i][j] = dpmin[i][k] + dpmin[k + <span class="number">1</span>][j] + pre[j] - pre[i - <span class="number">1</span>];</span><br><span class="line">                    m1[i][j] = k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> minn=INT_MAX,maxn=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=n;j&lt;=<span class="number">2</span>*n;i++,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        minn=min(minn,dpmin[i][j]);</span><br><span class="line">        maxn=max(maxn,dp[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;minn&lt;&lt;<span class="built_in">endl</span>&lt;&lt;maxn&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环形DP-四边形不等式优化的区间DP：石子合并&quot;&gt;&lt;a href=&quot;#环形DP-四边形不等式优化的区间DP：石子合并&quot; class=&quot;headerlink&quot; title=&quot;环形DP+四边形不等式优化的区间DP：石子合并&quot;&gt;&lt;/a&gt;环形DP+四边形不等式优化的区间D</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="环形DP的四边形不等式优化" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8E%AF%E5%BD%A2DP%E7%9A%84%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="环形DP的四边形不等式优化" scheme="https://xqc-1368.github.io/tags/%E7%8E%AF%E5%BD%A2DP%E7%9A%84%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>07 二进制优化多重背包问题：樱花</title>
    <link href="https://xqc-1368.github.io/2024/08/17/07%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BC%98%E5%8C%96%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%9A%E6%A8%B1%E8%8A%B1/"/>
    <id>https://xqc-1368.github.io/2024/08/17/07%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BC%98%E5%8C%96%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%9A%E6%A8%B1%E8%8A%B1/</id>
    <published>2024-08-17T06:53:17.218Z</published>
    <updated>2024-08-17T14:31:50.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二进制优化多重背包问题：樱花"><a href="#二进制优化多重背包问题：樱花" class="headerlink" title="二进制优化多重背包问题：樱花"></a>二进制优化多重背包问题：樱花</h2><h1 id="樱花"><a href="#樱花" class="headerlink" title="樱花"></a>樱花</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>《爱与愁的故事第四弹·plant》第一章。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>爱与愁大神后院里种了 $n$ 棵樱花树，每棵都有美学值 $C_i(0 \le C_i \le 200)$。爱与愁大神在每天上学前都会来赏花。爱与愁大神可是生物学霸，他懂得如何欣赏樱花：一种樱花树看一遍过，一种樱花树最多看 $P_i(0 \le P_i \le 100)$ 遍，一种樱花树可以看无数遍。但是看每棵樱花树都有一定的时间 $T_i(0 \le T_i \le 100)$。爱与愁大神离去上学的时间只剩下一小会儿了。求解看哪几棵樱花树能使美学值最高且爱与愁大神能准时（或提早）去上学。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>共 $n+1$行：</p><p>第 $1$ 行：现在时间 $T_s$（几时：几分），去上学的时间 $T_e$（几时：几分），爱与愁大神院子里有几棵樱花树 $n$。这里的 $T_s$，$T_e$ 格式为：<code>hh:mm</code>，其中 $0 \leq hh \leq 23$，$0 \leq mm \leq 59$，且 $hh,mm,n$ 均为正整数。</p><p>第 $2$ 行到第 $n+1$ 行，每行三个正整数：看完第 $i$ 棵树的耗费时间 $T_i$，第 $i$ 棵树的美学值 $C_i$，看第 $i$ 棵树的次数 $P_i$（$P_i=0$ 表示无数次，$P_i$ 是其他数字表示最多可看的次数 $P_i$）。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>只有一个整数，表示最大美学值。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6:50 7:00 3</span><br><span class="line">2 1 0</span><br><span class="line">3 3 1</span><br><span class="line">4 5 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$100\%$ 数据：$T_e-T_s \leq 1000$（即开始时间距离结束时间不超过 $1000$ 分钟），$n \leq 10000$。保证 $T_e,T_s$ 为同一天内的时间。</p><p>样例解释：赏第一棵樱花树一次，赏第三棵樱花树 $2$ 次。</p><h2 id="这是一个普通背包，多重背包，完全背包的混合"><a href="#这是一个普通背包，多重背包，完全背包的混合" class="headerlink" title="这是一个普通背包，多重背包，完全背包的混合"></a>这是一个普通背包，多重背包，完全背包的混合</h2><p>其他的背包正常做就行，但由于平时都是把多重背包一个物品最多取n件拆成n个这种的一件物品。时间会消耗得很厉害。于是就出现了二进制优化：</p><p>一个正整数n，可以被分解成1,2,4,…,2^(k-1),n-2^k+1的形式。其中，k是满足n-2^k+1&gt;0的最大整数。</p><p>例如，假设给定价值为2，数量为10的物品，依据二进制优化思想可将10分解为1+2+4+3，则原来价值为2，数量为10的物品可等效转化为价值分别为1x2，2x2，4x2，3x2，即价值分别为2，4，8，6，数量均为1的物品。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4cfb65670d62868228c256e5e03cfef1.png" alt=""></p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; t,c,p;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">100000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line"><span class="type">int</span> <span class="title function_">exchage</span><span class="params">(<span class="built_in">string</span> st,<span class="built_in">string</span> ed)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(st[<span class="number">1</span>]==<span class="string">&#x27;:&#x27;</span>)st=<span class="string">&quot;0&quot;</span>+st;</span><br><span class="line">    <span class="keyword">if</span>(ed[<span class="number">1</span>]==<span class="string">&#x27;:&#x27;</span>)ed=<span class="string">&quot;0&quot;</span>+ed;</span><br><span class="line">    <span class="type">int</span> hs=stoi(st.substr(<span class="number">0</span>,<span class="number">2</span>)),hed=stoi(ed.substr(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    <span class="type">int</span> ms=stoi(st.substr(<span class="number">3</span>,<span class="number">5</span>)),med=stoi(ed.substr(<span class="number">3</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hed&lt;hs)hed+=<span class="number">24</span>;</span><br><span class="line">    <span class="type">int</span> ret=(hed-hs)*<span class="number">60</span>+med-ms;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> st,ed;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;st&gt;&gt;ed&gt;&gt;n;</span><br><span class="line">    T=exchage(st,ed);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;T&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tempt,tempc,tempp;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tempt&gt;&gt;tempc&gt;&gt;tempp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tempp==<span class="number">1</span> || tempp==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t.push_back(tempt);</span><br><span class="line">            c.push_back(tempc);</span><br><span class="line">            p.push_back(tempp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tempp&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (tempp &gt; <span class="built_in">pow</span>(<span class="number">2</span>, x))</span><br><span class="line">            &#123;</span><br><span class="line">                t.push_back(tempt * <span class="built_in">pow</span>(<span class="number">2</span>, x));</span><br><span class="line">                c.push_back(tempc * <span class="built_in">pow</span>(<span class="number">2</span>, x));</span><br><span class="line">                p.push_back(<span class="number">1</span>);</span><br><span class="line">                tempp -= <span class="built_in">pow</span>(<span class="number">2</span>, x);</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">                t.push_back(tempt * tempp);</span><br><span class="line">                c.push_back(tempc * tempp);</span><br><span class="line"><span class="comment">//注意，数量（2个，4个...）绑定后相应的价值和重量也会发生改变</span></span><br><span class="line">                p.push_back(<span class="number">1</span>);</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]==<span class="number">0</span>)<span class="comment">//complete package</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=t[i];j&lt;=T;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j]=max(dp[j],dp[j-t[i]]+c[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=T;j&gt;=t[i];j--)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j]=max(dp[j],dp[j-t[i]]+c[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[T]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二进制优化多重背包问题：樱花&quot;&gt;&lt;a href=&quot;#二进制优化多重背包问题：樱花&quot; class=&quot;headerlink&quot; title=&quot;二进制优化多重背包问题：樱花&quot;&gt;&lt;/a&gt;二进制优化多重背包问题：樱花&lt;/h2&gt;&lt;h1 id=&quot;樱花&quot;&gt;&lt;a href=&quot;#樱花&quot;</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="多重背包DP的二进制优化" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85DP%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="多重背包DP的二进制优化" scheme="https://xqc-1368.github.io/tags/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85DP%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>06 树形DP：金明的预算方案</title>
    <link href="https://xqc-1368.github.io/2024/08/17/06%20%E6%A0%91%E5%BD%A2DP%EF%BC%9A%E9%87%91%E6%98%8E%E7%9A%84%E9%A2%84%E7%AE%97%E6%96%B9%E6%A1%88/"/>
    <id>https://xqc-1368.github.io/2024/08/17/06%20%E6%A0%91%E5%BD%A2DP%EF%BC%9A%E9%87%91%E6%98%8E%E7%9A%84%E9%A2%84%E7%AE%97%E6%96%B9%E6%A1%88/</id>
    <published>2024-08-17T06:53:17.215Z</published>
    <updated>2024-08-17T14:31:45.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树形DP：金明的预算方案"><a href="#树形DP：金明的预算方案" class="headerlink" title="树形DP：金明的预算方案"></a>树形DP：金明的预算方案</h1><p>其实这道题不用树形dp，也可以使用普通的背包dp，但是鉴于树形dp的简单题一题难求，于是我们用树形dp做。</p><h3 id="P1064-NOIP2006-提高组-金明的预算方案"><a href="#P1064-NOIP2006-提高组-金明的预算方案" class="headerlink" title="P1064 [NOIP2006 提高组] 金明的预算方案"></a>P1064 [NOIP2006 提高组] 金明的预算方案</h3><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过 $n$ 元钱就行”。今天一早，金明就开始做预算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子：</p><div class="table-container"><table><thead><tr><th style="text-align:center">主件</th><th style="text-align:center">附件</th></tr></thead><tbody><tr><td style="text-align:center">电脑</td><td style="text-align:center">打印机，扫描仪</td></tr><tr><td style="text-align:center">书柜</td><td style="text-align:center">图书</td></tr><tr><td style="text-align:center">书桌</td><td style="text-align:center">台灯，文具</td></tr><tr><td style="text-align:center">工作椅</td><td style="text-align:center">无</td></tr></tbody></table></div><p>如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有 $0$ 个、$1$ 个或 $2$ 个附件。每个附件对应一个主件，附件不再有从属于自己的附件。金明想买的东西很多，肯定会超过妈妈限定的 $n$ 元。于是，他把每件物品规定了一个重要度，分为 $5$ 等：用整数 $1 \sim 5$ 表示，第 $5$ 等最重要。他还从因特网上查到了每件物品的价格（都是 $10$ 元的整数倍）。他希望在不超过 $n$ 元的前提下，使每件物品的价格与重要度的乘积的总和最大。</p><p>设第 $j$ 件物品的价格为 $v_j$，重要度为$w_j$，共选中了 $k$ 件物品，编号依次为 $j_1,j_2,\dots,j_k$，则所求的总和为：</p><p>$v<em>{j_1} \times w</em>{j<em>1}+v</em>{j<em>2} \times w</em>{j<em>2}+ \dots +v</em>{j<em>k} \times w</em>{j_k}$。</p><p>请你帮助金明设计一个满足要求的购物单。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个整数，分别表示总钱数 $n$ 和希望购买的物品个数 $m$。</p><p>第 $2$ 到第 $(m + 1)$ 行，每行三个整数，第 $(i + 1)$ 行的整数 $v_i$，$p_i$，$q_i$ 分别表示第 $i$ 件物品的价格、重要度以及它对应的的主件。如果 $q_i=0$，表示该物品本身是主件。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数表示答案。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1000 5</span><br><span class="line">800 2 0</span><br><span class="line">400 5 1</span><br><span class="line">300 5 1</span><br><span class="line">400 3 0</span><br><span class="line">500 2 0</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2200</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于全部的测试点，保证 $1 \leq n \leq 3.2 \times 10^4$，$1 \leq m \leq 60$，$0 \leq v_i \leq 10^4$，$1 \leq p_i \leq 5$，$0 \leq q_i \leq m$，答案不超过 $2 \times 10^5$。</p><p>定义状态：dp【i】【j】=以后序遍历的方式遍历到节点  i  时，还剩的空间为 j 时的最佳answer。</p><p> 首先，我们需要构建一个树：（对于测试样例）注意一开始为了统摄所有根节点，我们建立一个0号节点来统摄。</p><p><img src="/images/2023-10-31-20-03-36-image.png" alt=""><br>这是这个dp数组在测试案例的情况下的最后输出结果，（后面可能会用到）</p><p><img src="/images/2023-10-31-19-57-49-image.png" alt=""></p><p>状态转移方程：xbcl</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; point_to[<span class="number">61</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;, p[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;, q[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">100</span>][<span class="number">3200</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> nowpoint,<span class="type">int</span> nowweight)</span></span><br><span class="line">&#123;<span class="comment">//第一个参数表示当前节点，第二个参数表示当前还剩的重量</span></span><br><span class="line">    <span class="keyword">if</span>(nowweight&lt;=<span class="number">0</span>)<span class="keyword">return</span> ;<span class="comment">//如果当前还剩的重量已经小于0，那么直接返回</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;point_to[nowpoint].size();i++)</span><br><span class="line">    &#123;<span class="comment">//遍历每一个当前节点的子节点</span></span><br><span class="line">        <span class="type">int</span> child = point_to[nowpoint][i];<span class="comment">//child为子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = nowweight-v[child]; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[child][j] = dp[nowpoint][j] + p[child]*v[child];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把当前0~nowweight-v[child]的所有项给直接搬过来。</span></span><br><span class="line"><span class="comment">再加上p[child]*v[child]即题目规定的权值</span></span><br><span class="line"><span class="comment">其中0~nowweight-v[child]记录着遍历过他的哥哥节点（前面的兄弟节点）后，</span></span><br><span class="line"><span class="comment">所得出的最佳答案</span></span><br><span class="line"><span class="comment">为什么把0~nowweight-v[child]直接搬过来加？首先我们要知道</span></span><br><span class="line"><span class="comment">dp[父节点]【0~nowweight-v[child]】表示的是在父亲只有该子节点的所有哥哥节点的时候</span></span><br><span class="line"><span class="comment">，而完全不取该子节点的有关权值的时候的最优解。</span></span><br><span class="line"><span class="comment">因为我们现在在讨论该子节点取的情况下的最优解，</span></span><br><span class="line"><span class="comment">而取该子节点势必会消耗v[child]的限额，于是我们给该子节点预留v[child]，</span></span><br><span class="line"><span class="comment">那么取完该节点后剩下0~nowweight-v[child]，</span></span><br><span class="line"><span class="comment">在递归到叶子节点（即下一行程序的dfs）</span></span><br><span class="line"><span class="comment">返回后0~nowweight-v[child]一一顺序对应v[child]~nowweight</span></span><br><span class="line"><span class="comment">于是对应原来父节点集合的v[child]~nowweight元素比大小（下面一个循环干的事），</span></span><br><span class="line"><span class="comment">最终得到父节点nowpoint的最优值集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        dfs(child, nowweight - v[child]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = nowweight; k &gt;= v[child]; k--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[nowpoint][k] = max(dp[nowpoint][k], dp[child][k - v[child]]);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这时候你会问了，对于兄弟节点之间，取两个，三个等等在哪里体现。</span></span><br><span class="line"><span class="comment">其实，这在搬过来加权值的时候已经体现了；</span></span><br><span class="line"><span class="comment">如处理样例中5号这个节点的时候，</span></span><br><span class="line"><span class="comment">我们把00000000···00000 1200 1200 1200···1200（十一（因为包括首尾）个）搬过来</span></span><br><span class="line"><span class="comment">在5号节点这个节点的权值1000加上去，dp第五行自然也就变成了1000 1000···1000 2200</span></span><br><span class="line"><span class="comment"> 2200··2200了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    n/=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v[i]&gt;&gt;p[i]&gt;&gt;q[i];</span><br><span class="line">        v[i]/=<span class="number">10</span>;</span><br><span class="line">        point_to[q[i]].push_back(i);</span><br><span class="line"><span class="comment">//建树的过程，point_to是二维数组，用point_to[i]记录i号节点指向的所有节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][n]*<span class="number">10</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>树状dp主要解决树形最优解问题。</p><p>步骤：</p><p>0.递归终止条件：</p><p>剩下限重小于0，返回即可；</p><p>1.遍历每一个子节点：</p><p>（1）搬来加权值：把父节点剪掉子节点的重量的部分照搬，加上子节点的权值，成为子节点的那一行的数组；</p><p>（2）递归：往下递归一层，就更新传参，更新当前节点的参数，更新当前限重。</p><p>（3）高位搬回去比较。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;树形DP：金明的预算方案&quot;&gt;&lt;a href=&quot;#树形DP：金明的预算方案&quot; class=&quot;headerlink&quot; title=&quot;树形DP：金明的预算方案&quot;&gt;&lt;/a&gt;树形DP：金明的预算方案&lt;/h1&gt;&lt;p&gt;其实这道题不用树形dp，也可以使用普通的背包dp，但是鉴于树</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="树形DP" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="树形DP" scheme="https://xqc-1368.github.io/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
  </entry>
  
  <entry>
    <title>05 单调队列优化DP：华科A题</title>
    <link href="https://xqc-1368.github.io/2024/08/17/05%20%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP%EF%BC%9A%E5%8D%8E%E7%A7%91A%E9%A2%98/"/>
    <id>https://xqc-1368.github.io/2024/08/17/05%20%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP%EF%BC%9A%E5%8D%8E%E7%A7%91A%E9%A2%98/</id>
    <published>2024-08-17T06:53:17.210Z</published>
    <updated>2024-08-17T14:31:40.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p>“如果一个选手比你小还比你强，你就可以退役了。”——单调队列的原理</p><h4 id="单调队列是一种主要用于解决”滑动区间“的最值问题的数据结构"><a href="#单调队列是一种主要用于解决”滑动区间“的最值问题的数据结构" class="headerlink" title="单调队列是一种主要用于解决”滑动区间“的最值问题的数据结构"></a><strong>单调队列</strong>是一种主要用于解决”滑动区间“的最值问题的数据结构</h4><p>即，在长度为  的序列中，求每个长度为  的区间的区间最值。它的时间复杂度是  ，在这个问题中比  的ST表和线段树要优。</p><p><img src="https://pic4.zhimg.com/80/v2-ef66afc38e068600939980673114127f_1440w.webp" alt=""></p><p>单调队列的基本思想是，维护一个双向队列（deque），遍历序列，仅当一个元素<strong>可能</strong>成为某个区间最值时才保留它。</p><p>形象地打个比方，上面的序列可以看成学校里各个年级XCPC选手，数字越大代表能力越强。每个选手只能在大学四年间参赛，毕业了就没有机会了。那么，每一年的王牌选手都在哪个年级呢？</p><p>一开始的时候，大三大四的学长都比较菜，大二的最强，而大一的等大二的毕业后还有机会上位，所以队列里有两个数。</p><p><img src="https://pic3.zhimg.com/80/v2-eeda8e22e5931732675ab99754f93bce_1440w.webp" alt=""></p><p>一年过去了，原本大一的成为大二，却发现新进校的新生非常强，自己再也没有机会成为最大值了，所以弹出队列。</p><p><img src="https://pic4.zhimg.com/80/v2-6749c5666b76cdc2f497df072f8626b3_1440w.webp" alt=""></p><p>又过了一年，新入校的新生尽管能力只有1，但理论上只要后面的人比他还菜，还是可能成为区间最大值的，所以入队。</p><p><img src="https://pic4.zhimg.com/80/v2-e8be2abc277505561313d865b856d327_1440w.webp" alt=""></p><p>终于，原本的王牌毕业了，后面的人以为熬出头了，谁知道这时一个巨佬级别的新生进入了集训队，这下其他所有人都没机会了。</p><p><img src="https://pic3.zhimg.com/80/v2-71dc212718a2565ce57d9e334c93da2e_1440w.webp" alt=""></p><p><em>（这只是比方，现实中各位选手的实力是会增长的，不符合这个模型ovo）</em></p><p>总之，观察就会发现，我们维护的这个队列总是单调递减的。如果维护区间最小值，那么维护的队列就是单调递增的。这就是为什么叫<strong>单调</strong>队列。</p><p><strong>例题：单调队列优化动态规划的应用</strong></p><h4 id="选择数字"><a href="#选择数字" class="headerlink" title="选择数字"></a>选择数字</h4><h6 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h6><p>给定一行 $n$ 个非负整数 $a_1 \cdots a_n$。现在你可以选择其中若干个数，但不能有超过 $k$ 个连续的数字被选择。你的任务是使得选出的数字的和最大。</p><h6 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h6><p>第一行两个整数 $n$，$k$。</p><p>以下 $n$ 行，每行一个整数表示 $a_i$。</p><h6 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h6><p>输出一个值表示答案。</p><h6 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h6><h6 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h6 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>对于 $20\%$ 的数据，$n \le 10$。</p><p>对于另外 $20\%$ 的数据，$k=1$。</p><p>对于 $60\%$ 的数据，$n \le 1000$。</p><p>对于 $100\%$ 的数据，$1 \le n \le 100000$，$1 \le k \le n$，$0 \le$ 数字大小 $\le 1,000,000,000$。</p><p>时间限制 $500$ ms。</p><p>这种题是很典型的<strong>单调队列优化DP</strong>。</p><p>我们把问题转化为删除若干个数，且删除的数间隔不超过<code>k</code>，求删除数的最小值。设<code>dp[i]</code>表示在删除第<code>i</code>个数的情况下， 前<code>i</code>个数中删除数的最小和。那么很容易想到转移方程：<br><img src="/images/2023-10-24-19-02-53-image.png" alt=""></p><p>这是因为，如果要删除某个数，除非它是前 k+1个数之一，否则在它之前的k+1个数中，至少要删除一个。最后的答案在最后 k+1个数里找最小值，然后用总和去减即可，因为最后 k+1个数中至少有一个是要删除的。</p><p>这个朴素方法是O（mn）的，为了优化它，我们可以使用单调队列。注意到，我们不断地在求<code>dp</code>的区间最小值，而且区间长度是固定的m+1  ，这正好符合滑动窗口的模型。只不过，我们需要动态地进行整个过程，即，在维护单调队列的过程中求出<code>dp</code>。</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxsize = <span class="number">100005</span>;</span><br><span class="line"><span class="type">int</span> dp[maxsize] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,k,a[maxsize],sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        sum+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看作删除若干个数，但是不能有间隔超过k；</span></span><br><span class="line">    <span class="comment">//dp[i]表示，删除a[i]的情况下，完成删除的最小值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=k+<span class="number">1</span>)</span><br><span class="line">            dp[i]=a[i];</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            dp[i]=dp[q.front()]+a[i];        </span><br><span class="line">        <span class="keyword">if</span>(!q.empty() &amp;&amp; q.front()&lt;i-k) q.pop_front();</span><br><span class="line">        <span class="keyword">while</span> (!q.empty() &amp;&amp; dp[q.back()] &gt; dp[i])</span><br><span class="line">        &#123;</span><br><span class="line">            q.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        q.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> emin=LONG_LONG_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n-k;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        emin=min(dp[i],emin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum-emin&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在这个过程中的易错点是：</p><p>进入队列的是元素下标不是元素内容！！，且每一次循环不一定一定有元素从头部出队。</p><p>另一个例题：华中科技大学2023新生赛A题</p><h1 id="HUSTFC-2023-简单的加法乘法计算题"><a href="#HUSTFC-2023-简单的加法乘法计算题" class="headerlink" title="[HUSTFC 2023] 简单的加法乘法计算题"></a>[HUSTFC 2023] 简单的加法乘法计算题</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>JokerShaco 有一个数字 $x$，最开始 $x=0$，他想要把 $x$ 变成 $y$。为了达到这个目标，他可以利用两个集合 $A$ 和 $B$。其中集合 $A$ 包含 $n$ 个元素，分别是从 $1$ 到 $n$ 的所有正整数；集合 $B$ 包含 $m$ 个元素。每次它可以对 $x$ 进行如下任意次操作：</p><ul><li>选择 $A$ 中的一个元素 $a$，令 $x$ 加上 $a$。</li><li>选择 $B$ 中的一个元素 $b$，令 $x$ 乘以 $b$。</li></ul><p>已知 $y$，$n$，$m$ 和 $B$ 中 $m$ 个元素的具体值，JokerShaco 想知道让 $x$ 变成 $y$ 的最少操作次数。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含三个整数 $y\ (1\le y\le 5\cdot 10^6)$，$n\ (1\le n\le 5\cdot 10^6)$ 和 $m\ (1\le m\le 10)$，其含义如题目所述。</p><p>第二行包含 $m$ 个正整数，其中第 $i$ 个表示 $B$ 中的第 $i$ 个元素 $b_i\ (1\le b_i\le 5\cdot 10^6)$。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示让 $x$ 变成 $y$ 的最少操作次数。在题目条件下可知一定能将 $x$ 变成 $y$。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 3 1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100 6 3</span><br><span class="line">2 3 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>初步想法是利用线性动态规划进行，dp[i]表示y=i的时候需要走的最少步骤数，状态转移方程为：</p><p>dp[i]=min(    minE(k from i-1 to i-n)  {dp[k]+1}    ,   </p><p>minE(r from 1 to m)   if(dp[i]%b[r]=0）dp[i]/b[r] )</p><p>可行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxsize=<span class="number">5000005</span>;</span><br><span class="line"><span class="type">int</span> dp[maxsize]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">deque</span> &lt;<span class="type">int</span>&gt; dq;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> b[<span class="number">11</span>];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> y,n,m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;y&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;maxsize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j]=INT_MAX;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; i &lt;= y; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=n)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            dp[i]=min(dp[i],dp[dq.front()]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> r = <span class="number">1</span>; r &lt;= m; r++)</span><br><span class="line">            &#123;</span><br><span class="line">                 <span class="keyword">if</span> (i % b[r] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                   dp[i] = min(dp[i], dp[i / b[r]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!dq.empty() &amp;&amp; dq.front()&lt;=i-n)</span><br><span class="line">        &#123;</span><br><span class="line">            dq.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!dq.empty() &amp;&amp; dp[dq.back()]&gt;dp[i])</span><br><span class="line">        &#123;</span><br><span class="line">            dq.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        dq.push_back(i);<span class="comment">//注意队列中始终是位置，而不是元素内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[y]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="特定类型的题型：多重背包的单调队列优化"><a href="#特定类型的题型：多重背包的单调队列优化" class="headerlink" title="特定类型的题型：多重背包的单调队列优化"></a>特定类型的题型：多重背包的单调队列优化</h1><h1 id="宝物筛选"><a href="#宝物筛选" class="headerlink" title="宝物筛选"></a>宝物筛选</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>终于，破解了千年的难题。小 FF 找到了王室的宝物室，里面堆满了无数价值连城的宝物。</p><p>这下小 FF 可发财了，嘎嘎。但是这里的宝物实在是太多了，小 FF 的采集车似乎装不下那么多宝物。看来小 FF 只能含泪舍弃其中的一部分宝物了。</p><p>小 FF 对洞穴里的宝物进行了整理，他发现每样宝物都有一件或者多件。他粗略估算了下每样宝物的价值，之后开始了宝物筛选工作：小 FF 有一个最大载重为 $W$ 的采集车，洞穴里总共有 $n$ 种宝物，每种宝物的价值为 $v_i$，重量为 $w_i$，每种宝物有 $m_i$ 件。小 FF 希望在采集车不超载的前提下，选择一些宝物装进采集车，使得它们的价值和最大。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行为一个整数 $n$ 和 $W$，分别表示宝物种数和采集车的最大载重。</p><p>接下来 $n$ 行每行三个整数 $v_i,w_i,m_i$。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出仅一个整数，表示在采集车不超载的情况下收集的宝物的最大价值。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 20</span><br><span class="line">3 9 3</span><br><span class="line">5 9 1</span><br><span class="line">9 4 2</span><br><span class="line">8 1 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">47</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>对于 $30\%$ 的数据，$n\leq \sum m_i\leq 10^4$，$0\le W\leq 10^3$。</p><p>对于 $100\%$ 的数据，$n\leq \sum m_i \leq 10^5$，$0\le W\leq 4\times 10^4$，$1\leq n\le 100$。</p><h2 id="多重背包的原始状态转移方程："><a href="#多重背包的原始状态转移方程：" class="headerlink" title="多重背包的原始状态转移方程："></a>多重背包的原始状态转移方程：</h2><p>f(i,j)=max(f(i−1,j),f(i−1,j−v)+w,⋯,f(i−1,j−sv)+sw)</p><p>f(i,j−v)=max(f(i−1,j−v),f(i−1,j−2v)+w,⋯,f(i−1,j−(s+1)v)+(s)w)</p><p>f(i,j−2v)=max(f(i−1,j−2v),f(i−1,j−3v)+w,⋯,f(i−1,j−(s+2)v)+sw)</p><p>…</p><p>此处我们取 r = j % v</p><p>f(i,r+sv)=max(f(i−1,r+sv),f(i−1,r+(s−1)v)+w,⋯,f(i−1,r)+sw)</p><p>⋯</p><p>f(i,r+2v)=max(f(i−1,r+2v),f(i−1,r+v)+w,f(i−1,r)+2w)</p><p>f(i,r+v)=max(f(i−1,r+v),f(i−1,r)+w)</p><p>f(i,r)=f(i−1,r)</p><p><img src="https://img-blog.csdnimg.cn/603c76ef4bae466ca24948b2abc6facc.png" alt="">朴素二维数组代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxsize=<span class="number">4e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> dp[maxsize][maxsize]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> v[<span class="number">105</span>],w[<span class="number">105</span>],m[<span class="number">105</span>],n,W;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;W;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//当前考虑到第i件物品</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">0</span>;r&lt;w[i];r++)<span class="comment">//考虑余数r，余数可能为0~w[i]-1中的任意一个数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">deque</span>&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=r;j&lt;=W;j+=w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!q.empty() &amp;&amp; j-q.front()&gt;m[i]*w[i])</span><br><span class="line">                    q.pop_front();</span><br><span class="line">                <span class="keyword">while</span> (!q.empty() &amp;&amp; dp[i - <span class="number">1</span>][q.back()] + (j - q.back()) / w[i] * v[i] &lt;= dp[i - <span class="number">1</span>][j])</span><br><span class="line">                    q.pop_back();</span><br><span class="line">                q.push_back(j);</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][q.front()] + (j - q.front()) / w[i] * v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n][W]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一维数组空间优化代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxsize=<span class="number">4e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> dp[maxsize]=&#123;<span class="number">0</span>&#125;,g[maxsize]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> v[<span class="number">10005</span>],w[<span class="number">10005</span>],m[<span class="number">10005</span>],n,W;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;W;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i]&gt;&gt;m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//当前考虑到第i件物品</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=<span class="number">0</span>;r&lt;w[i];r++)<span class="comment">//考虑余数r，余数可能为0~w[i]-1中的任意一个数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">deque</span>&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">            <span class="built_in">memcpy</span>(g,dp,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=r;j&lt;=W;j+=w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!q.empty() &amp;&amp; j-q.front()&gt;m[i]*w[i])</span><br><span class="line">                    q.pop_front();</span><br><span class="line">                <span class="keyword">while</span> (!q.empty() &amp;&amp; g[q.back()] + (j - q.back()) / w[i] * v[i] &lt;= g[j])</span><br><span class="line">                    q.pop_back();</span><br><span class="line">                q.push_back(j);</span><br><span class="line">                dp[j] = g[q.front()] + (j - q.front()) / w[i] * v[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[W]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单调队列&quot;&gt;&lt;a href=&quot;#单调队列&quot; class=&quot;headerlink&quot; title=&quot;单调队列&quot;&gt;&lt;/a&gt;单调队列&lt;/h2&gt;&lt;p&gt;“如果一个选手比你小还比你强，你就可以退役了。”——单调队列的原理&lt;/p&gt;
&lt;h4 id=&quot;单调队列是一种主要用于解决”滑动</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="DP的单调队列优化" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/DP%E7%9A%84%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="DP的单调队列优化" scheme="https://xqc-1368.github.io/tags/DP%E7%9A%84%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>04 状态压缩DP：吃奶酪+Vitamin</title>
    <link href="https://xqc-1368.github.io/2024/08/17/04%20%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP%EF%BC%9A%E5%90%83%E5%A5%B6%E9%85%AA+Vitamin/"/>
    <id>https://xqc-1368.github.io/2024/08/17/04%20%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP%EF%BC%9A%E5%90%83%E5%A5%B6%E9%85%AA+Vitamin/</id>
    <published>2024-08-17T06:53:17.207Z</published>
    <updated>2024-08-17T14:31:30.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吃奶酪"><a href="#吃奶酪" class="headerlink" title="吃奶酪"></a>吃奶酪</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>房间里放着 $n$ 块奶酪。一只小老鼠要把它们都吃掉，问至少要跑多少距离？老鼠一开始在 $(0,0)$ 点处。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有一个整数，表示奶酪的数量 $n$。</p><p>第 $2$ 到第 $(n + 1)$ 行，每行两个实数，第 $(i + 1)$ 行的实数分别表示第 $i$ 块奶酪的横纵坐标 $x_i, y_i$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个实数，表示要跑的最少距离，保留 $2$ 位小数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 1</span><br><span class="line">1 -1</span><br><span class="line">-1 1</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7.41</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于全部的测试点，保证 $1\leq n\leq 15$，$|x_i|, |y_i| \leq 200$，小数点后最多有 $3$ 位数字。</p><h4 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h4><p>对于两个点 $(x_1,y_1)$，$(x_2, y_2)$，两点之间的距离公式为 $\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$。</p><hr><p>$2022.7.13$：新增加一组 $\text{Hack}$ 数据。</p><p>本题使用状态压缩动态规划：状态压缩DP用于解决N小于21的图论问题（本身需要搜索解决的）</p><h6 id="理解状压DP："><a href="#理解状压DP：" class="headerlink" title="理解状压DP："></a>理解状压DP：</h6><p>DP[ j ][ S ]表示已走过S的二进制表示的路径，目前终点为 j ；</p><p>比如S是00110101表示已走过第一个点，第三个点，第五个点，第六个点。<br>而假如所给输入一共有n个点，单独表示第一个点记为1&lt;&lt;0,单独表示第二个点记为1&lt;&lt;1由此类推单独表示第n个点为1&lt;&lt;(n-1)，表示已经走过n个点中所有的点，为(1&lt;&lt;n)-1因此，最外层循环枚举 00000000~11111111这所有的情况</p><p>核心部分代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> S=<span class="number">1</span>;S&lt;(<span class="number">1</span>&lt;&lt;n);S++)<span class="comment">//S</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//i</span></span><br><span class="line">       <span class="keyword">if</span>(S &amp; (<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)))<span class="comment">//2</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">              <span class="keyword">if</span> (!(S &amp; (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))) &amp;&amp; G[i][j]!=<span class="number">-1</span>)<span class="comment">//3</span></span><br><span class="line">                 dp[j][S | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))] = min(dp[j][S | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))] , dp[i][S] + G[i][j]);</span><br></pre></td></tr></table></figure><p>状态转移方程为：</p><p>if(S的j-1项为0)  ：</p><p>dp[j][S的j-1项置1]=minE(i from 1 to n and S的第i项为1)  {dp[i][S]+G[i][j]}其中G为邻接表</p><p>总体思路：</p><p>以j为终点</p><p>枚举每个可能的i 到 j，所需要的权值，求最小；</p><p>//S的一层循环提供了每个可能的已走过的路径：</p><p>//i一层循环枚举了目前处于第i个点，但是第i个点不一定在当前的S状态下被走过，所以我们需要判断语句//2，来知晓是否被走过，如果没被走过，则不用再往下考虑。</p><p>S&amp;(1&lt;&lt;(i-1))  表示S从右往左数第（i-1）位为1；</p><p>为什么要i-1，因为我们想最大化利用空间，S最右边是第零位，即S=00000001 = =1&lt;&lt;(1-1)以此类推；</p><p>//j这层循环中枚举了每个在当前的S的状态下，还未到达过的点，即S为0的位置，//3处判断表示当前已走过路径的S的（j-1）位未走过（即为0），并且G[i][j]!=-1表示当前枚举的i可以到达j，G是一个整体的邻接表。</p><p>接下来填充dp[ j ][ S  | (1 &lt;&lt; ( j - 1 ) ) ]位置的数字，即dp当中，以j位置结尾，已走过路径为当前的S在第（j-1）位加上1，即路径上的第j位表示走过  的数字等于每一个以i结尾，已走过路径为S的dp表格值加上i到j的权值的和的最小值，于是，我们求出整个dp表格</p><p>最后关于如何寻找最值位置的问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = ans &gt; dp[i][(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] ? dp[i][(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] : ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ans为输出的最短路径规划，遍历每一个终点，寻找走过（1&lt;&lt;n）-1即走过11111111的路径的所有终点状态，即找以1号位置结尾的11111111，以2号位置结尾的11111111········</p><p>于是，我们求出了答案；</p><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 17</span></span><br><span class="line"><span class="type">double</span> dp[<span class="number">16</span>][<span class="number">66000</span>];<span class="comment">//n最大值为15，因此取2的15次方大小，为了保险我取了16次方</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">double</span> x[maxsize]=&#123;<span class="number">0</span>&#125;,y[maxsize]=&#123;<span class="number">0</span>&#125;,G[maxsize][maxsize]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;maxsize;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;maxsize;j++)</span><br><span class="line">    G[i][j]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line">            G[i][j] =G[j][i]= <span class="built_in">sqrt</span>((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">66000</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j]=DBL_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">1</span> &lt;&lt; (i<span class="number">-1</span>)] = <span class="built_in">sqrt</span>((x[i]) * (x[i]) + (y[i]) * (y[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> S=<span class="number">1</span>;S&lt;(<span class="number">1</span>&lt;&lt;n);S++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(S &amp; (<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">if</span> (!(S &amp; (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))) &amp;&amp; G[i][j]!=<span class="number">-1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            dp[j][S | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))] = dp[j][S | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))] &gt; dp[i][S] + G[i][j] ? dp[i][S] + G[i][j] : dp[j][S | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))];</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> ans=INT_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = ans &gt; dp[i][(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] ? dp[i][(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] : ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的题目是对图论的dp方法，下面的例题显然可以看出的状压dp</p><h1 id="Vitamins"><a href="#Vitamins" class="headerlink" title="Vitamins"></a>Vitamins</h1><h2 id="题面翻译"><a href="#题面翻译" class="headerlink" title="题面翻译"></a>题面翻译</h2><p>数据有$n$组数,每组数有一个价值$c_i$和一个字符串S,字符串S中包含3个字母A,B,C，问集齐ABC三个字母的最小价值（一个字母可以有多个）</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">5 C</span><br><span class="line">6 B</span><br><span class="line">16 BAC</span><br><span class="line">4 A</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">10 AB</span><br><span class="line">15 BA</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><h2 id="样例-3"><a href="#样例-3" class="headerlink" title="样例 #3"></a>样例 #3</h2><h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入 #3"></a>样例输入 #3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10 A</span><br><span class="line">9 BC</span><br><span class="line">11 CA</span><br><span class="line">4 A</span><br><span class="line">5 B</span><br></pre></td></tr></table></figure><h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出 #3"></a>样例输出 #3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><h2 id="样例-4"><a href="#样例-4" class="headerlink" title="样例 #4"></a>样例 #4</h2><h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入 #4"></a>样例输入 #4</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">100 A</span><br><span class="line">355 BCA</span><br><span class="line">150 BC</span><br><span class="line">160 AC</span><br><span class="line">180 B</span><br><span class="line">190 CA</span><br></pre></td></tr></table></figure><h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出 #4"></a>样例输出 #4</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">250</span><br></pre></td></tr></table></figure><h2 id="样例-5"><a href="#样例-5" class="headerlink" title="样例 #5"></a>样例 #5</h2><h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入 #5"></a>样例输入 #5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5 BA</span><br><span class="line">11 CB</span><br></pre></td></tr></table></figure><h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出 #5"></a>样例输出 #5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 1005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> c[maxsize] = &#123;<span class="number">0</span>&#125;, a[maxsize] = &#123;<span class="number">0</span>&#125;, dp[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">mark</span><span class="params">(<span class="type">int</span> x, <span class="built_in">string</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[x] = a[x] | (<span class="number">1</span> &lt;&lt; ((<span class="type">long</span> <span class="type">long</span>)s[i] - <span class="number">65</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c[i] &gt;&gt; s;</span><br><span class="line">        mark(i, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[j] = LONG_LONG_MAX / <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> st = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>) - <span class="number">1</span>; st &gt;= <span class="number">0</span>; st--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[st | a[i]] = min(dp[st | a[i]], dp[st] + c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dp[(<span class="number">1</span> &lt;&lt; <span class="number">3</span>) - <span class="number">1</span>] == (<span class="type">long</span> <span class="type">long</span>)(LONG_LONG_MAX / <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">10</span>)))</span><br><span class="line">        dp[(<span class="number">1</span> &lt;&lt; <span class="number">3</span>) - <span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[(<span class="number">1</span> &lt;&lt; <span class="number">3</span>) - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次实现了状压dp可视化！！！！<br><img src="/images/20231027174441.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;吃奶酪&quot;&gt;&lt;a href=&quot;#吃奶酪&quot; class=&quot;headerlink&quot; title=&quot;吃奶酪&quot;&gt;&lt;/a&gt;吃奶酪&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="状压DP" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8BDP/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="状压DP" scheme="https://xqc-1368.github.io/tags/%E7%8A%B6%E5%8E%8BDP/"/>
    
  </entry>
  
  <entry>
    <title>03 区域DP：三素数数</title>
    <link href="https://xqc-1368.github.io/2024/08/17/03%20%E5%8C%BA%E5%9F%9FDP%EF%BC%9A%E4%B8%89%E7%B4%A0%E6%95%B0%E6%95%B0/"/>
    <id>https://xqc-1368.github.io/2024/08/17/03%20%E5%8C%BA%E5%9F%9FDP%EF%BC%9A%E4%B8%89%E7%B4%A0%E6%95%B0%E6%95%B0/</id>
    <published>2024-08-17T06:53:17.204Z</published>
    <updated>2024-08-17T13:31:16.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区域DP：三素数数"><a href="#区域DP：三素数数" class="headerlink" title="区域DP：三素数数"></a>区域DP：三素数数</h2><h1 id="三素数数"><a href="#三素数数" class="headerlink" title="三素数数"></a>三素数数</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>蛟川书院的一道练习题QAQ</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如果一个数的所有连续三位数字都是大于100的素数，则该数称为三素数数。比如113797是一个6位的三素数数。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个整数n（3 ≤ n ≤ 10000），表示三素数数的位数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示n位三素数的个数m，要求输出m除以10^9 + 9的余数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">204</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>区域动归QAQ</p><p>设<code>dp[k][i][j]</code>表示到了第k位，这个数字是i，上一个数字是j的方案数</p><ul><li>初始化 <code>dp[2][0→9][0→9]=1</code></li><li>枚举第几位<code>i</code>，现在的数字<code>now</code>，之前的数字<code>pre</code>，上上个数字<code>last</code></li><li>如果<code>last∗100+pre+10+now</code>是素数，那么<code>dp[i][now][pre]+=dp[i−1][pre][last]</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; prime;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">10001</span>][<span class="number">11</span>][<span class="number">11</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt; <span class="title function_">is_prime</span><span class="params">(<span class="number">1001</span>)</span>; <span class="comment">// 0表示质数，1表示不是质数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_prime</span><span class="params">(<span class="type">int</span> n)</span><span class="comment">//欧拉筛板子</span></span><br><span class="line">&#123;</span><br><span class="line">    is_prime[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime[i] == <span class="number">0</span>)</span><br><span class="line">            prime.push_back(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : prime)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * j &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            is_prime[i * j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)is_prime[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//仅需要统计101~999的质数，剩下的不属于这个范围</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">combine</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">100</span>+b*<span class="number">10</span>+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n; get_prime(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">            dp[<span class="number">2</span>][i][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">3</span>;k&lt;=n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">9</span>;l++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(is_prime[combine(l,j,i)]==<span class="number">0</span>)</span><br><span class="line">                    dp[k][i][j]=(dp[k][i][j]+dp[k<span class="number">-1</span>][j][l])%MOD;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)ans=(ans+dp[n][i][j])%MOD;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="另一道题目：Colo"><a href="#另一道题目：Colo" class="headerlink" title="另一道题目：Colo."></a>另一道题目：Colo.</h2><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>小 F 和小 Y 经常在一起玩耍，因为小 F 是一个画家，他喜欢在一个长度为 n，宽度为 1 的网格图上画画，从左往右第 i 个方格被涂成了一种颜色 a_i。</p><p>你觉得他的随意涂鸦太难看了，想要保留恰好 k 种颜色（<strong>你不能保留没在网格图上出现的颜色</strong>），使得网格图上没被涂成任何一种你喜欢的颜色的网格都被剪掉，最后会剩下一些网格，你希望这些网格从左到右颜色的编号是单调不下降的。</p><p>此外，小 Y 使用的第 i 种颜色有一个价值 b_i，小 Y 看到了你裁剪后的网格图很是高兴，于是决定付给你你选择的颜色的价值总和。</p><p>你需要求出你能够获得的最大的价值是多少。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 n,k，表示小 Y 画画的网格图的大小和你需要保留颜色的种类数。<br>第二行 n 个整数 a_i，表示小 Y 画出来的网格图从左往右第 i 个格子的颜色。<br>第三行 n 个整数 b_i，表示第 i 种颜色的价值。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数，表示你能够获得的最大价值；特别地，如果无法找到选择颜色的方法满足要求，输出 -1。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">1 2 1 3 2</span><br><span class="line">5 3 1 100 100</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 3</span><br><span class="line">1 3 4 2 9 3 4 2 5 1</span><br><span class="line">1 5 2 3 9 8 1 2 3 10</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><h4 id="【样例解释-1】"><a href="#【样例解释-1】" class="headerlink" title="【样例解释 #1】"></a>【样例解释 #1】</h4><p>对于第一组样例，我们可以选择 1 号和 3 号颜色保留，剩下的网格图即为 [1,1,3]，满足单调不下降这一个限制，获得的价值即为 b_1+b_3=5+1=6，可以证明这是最优的办法。</p><h4 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h4><p>对于所有测试数据，满足 1 \le n \le 500，1 \le k \le 500，1 \le a_i \le n，1 \le b_i \le 10^9。</p><p>各测试点的附加限制如下表所示。</p><p><strong>本题开启捆绑测试，所有数据范围均相同的测试点捆绑为一个 \text{Subtask}。</strong></p><div class="table-container"><table><thead><tr><th>测试点</th><th>n,k \le</th><th>特殊性质</th></tr></thead><tbody><tr><td>1 \sim 3</td><td>10</td><td>无</td></tr><tr><td>4 \sim 5</td><td>100</td><td>无</td></tr><tr><td>6 \sim 10</td><td>500</td><td>不同的颜色不超过 10 种</td></tr><tr><td>11 \sim 15</td><td>500</td><td>每种颜色出现的次数不超过 2 次</td></tr><tr><td>16 \sim 20</td><td>500</td><td>无</td></tr></tbody></table></div><p>首先是输入部分代码</p><p>在输入时候用bucket的方式记录每一种颜色的对应第一个和最后一个位置（后面有用）</p><p>记录方式用桶的方式便于查询</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(bucket[a[i]].begin ==inf)&#123;</span><br><span class="line">            bucket[a[i]].begin =i;</span><br><span class="line">            bucket[a[i]].last =i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            bucket[a[i]].last =i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b[i];</span><br></pre></td></tr></table></figure><p>接下来记录遍历每个颜色（对于每个颜色i） ，看看有哪些颜色（即j）在原数组中的位置是完全在他前面的，即 j 颜色的last小于 i 颜色的begin，(并且j&lt;i由循环条件可知默认成立)。如果有的话加入到数组g的第 i 项指向的（可以这么理解）数组中去。表示在取 i 颜色时候，可以取 j 颜色作为他的前驱</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> g[<span class="number">505</span>][<span class="number">505</span>]=&#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(bucket[i].begin ==inf)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bucket[j].begin ==inf)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(bucket[i].begin &gt;bucket[j].last )&#123;</span><br><span class="line">                g[i][count]=j;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最重要的部分：填表</p><p>表格含义如下</p><p><img src="/images/2023-10-03-21-09-42-image.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(bucket[i].begin !=inf)</span><br><span class="line">            dp[<span class="number">1</span>][i]=b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=k;i++)<span class="comment">//i循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j++)<span class="comment">//j循环</span></span><br><span class="line">            <span class="keyword">if</span>(bucket[j].begin !=inf &amp;&amp; g[j][<span class="number">0</span>]!=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;g[j][p]!=<span class="number">0</span>;p++)<span class="comment">//p循环</span></span><br><span class="line">                    <span class="keyword">if</span>(dp[i<span class="number">-1</span>][g[j][p]] !=<span class="number">0</span>)</span><br><span class="line">                        dp[i][j]=max(dp[i][j],dp[i<span class="number">-1</span>][g[j][p]]+b[j]);<span class="comment">//#</span></span><br></pre></td></tr></table></figure><p>以样例二为例</p><p>关键数组信息</p><p><img src="/images/2023-10-03-21-10-42-image.png" alt=""></p><p>第一行循环设置递推初始调件；</p><p>第二个 i 循环，遍历从第二行到第k行，因为问的是选k个，再往下遍历没有意义</p><p>第三个 j 循环，遍历第 i 列到最后的值，ij用来定位每个位置</p><p>以上好像都是废话。。</p><p>第四个p循环，遍历当前所在位置的上一行中所有可能成为该位置前驱的位置，#处表示取这些通过状态转移方程到该位置的所有值的最大值</p><p>最后，遍历第k行找出所有可能情况的最大值，没有，则输出-1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> maxf=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(bucket[i].begin !=inf)</span><br><span class="line">            maxf=max(maxf,dp[k][i]);</span><br><span class="line">    <span class="keyword">if</span>(maxf==<span class="number">0</span>)maxf=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxf&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>完整代码附上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf -1</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> g[<span class="number">505</span>][<span class="number">505</span>]=&#123;<span class="number">0</span>&#125;; </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span>  begin;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span>  last;</span><br><span class="line">&#125;edge;</span><br><span class="line">edge bucket[<span class="number">505</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n,k,a[<span class="number">505</span>],b[<span class="number">505</span>],dp[<span class="number">505</span>][<span class="number">505</span>]=&#123;<span class="number">0</span>&#125;,count;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        bucket[i].begin =inf;</span><br><span class="line">        bucket[i].last =inf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(bucket[a[i]].begin ==inf)&#123;</span><br><span class="line">            bucket[a[i]].begin =i;</span><br><span class="line">            bucket[a[i]].last =i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            bucket[a[i]].last =i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(bucket[i].begin ==inf)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bucket[j].begin ==inf)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(bucket[i].begin &gt;bucket[j].last )&#123;</span><br><span class="line">                g[i][count]=j;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(bucket[i].begin !=inf)</span><br><span class="line">            dp[<span class="number">1</span>][i]=b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(bucket[j].begin !=inf &amp;&amp; g[j][<span class="number">0</span>]!=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;g[j][p]!=<span class="number">0</span>;p++)</span><br><span class="line">                    <span class="keyword">if</span>(dp[i<span class="number">-1</span>][g[j][p]] !=<span class="number">0</span>)</span><br><span class="line">                        dp[i][j]=max(dp[i][j],dp[i<span class="number">-1</span>][g[j][p]]+b[j]);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> maxf=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(bucket[i].begin !=inf)</span><br><span class="line">            maxf=max(maxf,dp[k][i]);</span><br><span class="line">    <span class="keyword">if</span>(maxf==<span class="number">0</span>)maxf=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxf&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;区域DP：三素数数&quot;&gt;&lt;a href=&quot;#区域DP：三素数数&quot; class=&quot;headerlink&quot; title=&quot;区域DP：三素数数&quot;&gt;&lt;/a&gt;区域DP：三素数数&lt;/h2&gt;&lt;h1 id=&quot;三素数数&quot;&gt;&lt;a href=&quot;#三素数数&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="区域DP" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E5%9F%9FDP/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="区域DP" scheme="https://xqc-1368.github.io/tags/%E5%8C%BA%E5%9F%9FDP/"/>
    
  </entry>
  
  <entry>
    <title>02 区间DP：涂色</title>
    <link href="https://xqc-1368.github.io/2024/08/17/02%20%E5%8C%BA%E9%97%B4DP%EF%BC%9A%E6%B6%82%E8%89%B2/"/>
    <id>https://xqc-1368.github.io/2024/08/17/02%20%E5%8C%BA%E9%97%B4DP%EF%BC%9A%E6%B6%82%E8%89%B2/</id>
    <published>2024-08-17T06:53:17.201Z</published>
    <updated>2024-08-17T06:36:14.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CQOI2007-涂色"><a href="#CQOI2007-涂色" class="headerlink" title="[CQOI2007] 涂色"></a>[CQOI2007] 涂色</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>假设你有一条长度为 $5$ 的木板，初始时没有涂过任何颜色。你希望把它的 $5$ 个单位长度分别涂上红、绿、蓝、绿、红色，用一个长度为 $5$ 的字符串表示这个目标：$\texttt{RGBGR}$。</p><p>每次你可以把一段连续的木板涂成一个给定的颜色，后涂的颜色覆盖先涂的颜色。例如第一次把木板涂成 $\texttt{RRRRR}$，第二次涂成 $\texttt{RGGGR}$，第三次涂成 $\texttt{RGBGR}$，达到目标。</p><p>用尽量少的涂色次数达到目标。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入仅一行，包含一个长度为 $n$ 的字符串，即涂色目标。字符串中的每个字符都是一个大写字母，不同的字母代表不同颜色，相同的字母代表相同颜色。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>仅一行，包含一个数，即最少的涂色次数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAAAA</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RGBGR</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$40\%$ 的数据满足 $1\le n\le 10$。</p><p>$100\%$ 的数据满足 $1\le n\le 50$。</p><p>区间dp的plus版：我愿称之为完全区间dp</p><p>把从i到j的所有情况列在对应表格中；我们发现：</p><p>GBBR可以分解为（此处为常规区间dp）</p><p>G+BBR</p><p>GB+BR</p><p>GBB+R</p><p>这3种情况（隔板法分割把区间一分为二）</p><p>当然也会出现不用讨论分隔直接完成的：比如RGBBR相对于RGBB就可以相等；</p><p>首先赋初值，对角线为初值，赋1；</p><p><img src="/images/2023-10-12-00-01-28-image.png" alt=""></p><p>然后我们可以手动填上第二个斜线上的数字，我们可以看见，因为s[2]==s[3]，所以只要在刷一个的时候范围刷大刷到另一个所在位置即可，故dp[ i ][ j ] = =dp[ i-1 ][ j ]==dp[i+1][ j ]</p><p>所以当区间 i~j 首末数字相等时，可以直接 ”刷过来“ ，即等于下面的或者左边的；</p><p><img src="/images/2023-10-12-00-01-58-image.png" alt=""></p><p>当区间 i~j 首末数字不相等时候，则用区间dp对当前空格位置代表的字符串切分，比出一个最小值</p><p>例如GBBR可以分解为（此处为常规区间dp）</p><p>G+BBR   dp[ 1 ][ 1 ]+dp[ 2 ][ 4 ]</p><p>GB+BR   dp[ 1 ][ 2 ]+dp[ 3 ][ 4 ]</p><p>GBB+R   dp[ 1 ][ 3 ]+dp[ 4 ][ 4 ]</p><p>这3种情况（隔板法分割把区间一分为二）</p><p>因此：dp[ 1 ][ 4 ]=max{ dp[ 1 ][ 1 ]+dp[ 2 ][ 4 ] , dp[ 1 ][ 2 ]+dp[ 3 ][ 4 ] , dp[ 1 ][ 3 ]+dp[ 4 ][ 4 ] };</p><p>由此我们得到对于任意一个dp[ i ][ j ]的状态转移方程</p><p>dp[ i ][ j ]=  case1:   dp[ i-1 ][ j ]  or  dp[i+1][ j ]  ( if s[ i ]==s[ j ] )</p><p>case 2: maxE(k from i to j-1){dp[ i ][ k ]+dp[ k+1 ][ j ]}  ( if s[ i ]!=s[ j ] )</p><p><img src="/images/2023-10-12-00-03-22-image.png" alt=""></p><p>由此我们就可以很愉快的敲代码了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 55</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="type">int</span> dp[maxsize][maxsize]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">            dp[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">0</span>;p&lt;s.size()<span class="number">-1</span>;p++)<span class="comment">//注意见下</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=p+<span class="number">1</span>;j&lt;s.size();i++,j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==s[j])dp[i][j]=dp[i+<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j]=dp[i][i]+dp[i+<span class="number">1</span>][j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;k++)</span><br><span class="line">                    dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+<span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][s.size()<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的p是指对第2~n个主对角线方向的斜线的遍历（第一个斜线即主对角线已经遍历过了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CQOI2007-涂色&quot;&gt;&lt;a href=&quot;#CQOI2007-涂色&quot; class=&quot;headerlink&quot; title=&quot;[CQOI2007] 涂色&quot;&gt;&lt;/a&gt;[CQOI2007] 涂色&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="区间DP" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="区间DP" scheme="https://xqc-1368.github.io/tags/%E5%8C%BA%E9%97%B4DP/"/>
    
  </entry>
  
  <entry>
    <title>背包DP：Make_Full_Use_Of模型：kkksc03考前临时抱佛脚</title>
    <link href="https://xqc-1368.github.io/2024/08/17/01%20%E8%83%8C%E5%8C%85DP%EF%BC%9AMake_Full_Use_Of%E6%A8%A1%E5%9E%8B%EF%BC%9Akkksc03%E8%80%83%E5%89%8D%E4%B8%B4%E6%97%B6%E6%8A%B1%E4%BD%9B%E8%84%9A/"/>
    <id>https://xqc-1368.github.io/2024/08/17/01%20%E8%83%8C%E5%8C%85DP%EF%BC%9AMake_Full_Use_Of%E6%A8%A1%E5%9E%8B%EF%BC%9Akkksc03%E8%80%83%E5%89%8D%E4%B8%B4%E6%97%B6%E6%8A%B1%E4%BD%9B%E8%84%9A/</id>
    <published>2024-08-17T06:53:17.196Z</published>
    <updated>2024-08-17T14:31:12.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kkksc03考前临时抱佛脚"><a href="#kkksc03考前临时抱佛脚" class="headerlink" title="kkksc03考前临时抱佛脚"></a>kkksc03考前临时抱佛脚</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>kkksc03 的大学生活非常的颓废，平时根本不学习。但是，临近期末考试，他必须要开始抱佛脚，以求不挂科。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>这次期末考试，kkksc03 需要考 $4$ 科。因此要开始刷习题集，每科都有一个习题集，分别有 $s<em>1,s_2,s_3,s_4$ 道题目，完成每道题目需要一些时间，可能不等（$A_1,A_2,\ldots,A</em>{s<em>1}$，$B_1,B_2,\ldots,B</em>{s<em>2}$，$C_1,C_2,\ldots,C</em>{s<em>3}$，$D_1,D_2,\ldots,D</em>{s_4}$）。</p><p>kkksc03 有一个能力，他的左右两个大脑可以同时计算 $2$ 道不同的题目，但是仅限于同一科。因此，kkksc03 必须一科一科的复习。</p><p>由于 kkksc03 还急着去处理洛谷的 bug，因此他希望尽快把事情做完，所以他希望知道能够完成复习的最短时间。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>本题包含 $5$ 行数据：第 $1$ 行，为四个正整数 $s_1,s_2,s_3,s_4$。</p><p>第 $2$ 行，为 $A<em>1,A_2,\ldots,A</em>{s_1}$ 共 $s_1$ 个数，表示第一科习题集每道题目所消耗的时间。</p><p>第 $3$ 行，为 $B<em>1,B_2,\ldots,B</em>{s_2}$ 共 $s_2$ 个数。</p><p>第 $4$ 行，为 $C<em>1,C_2,\ldots,C</em>{s_3}$ 共 $s_3$ 个数。</p><p>第 $5$ 行，为 $D<em>1,D_2,\ldots,D</em>{s_4}$ 共 $s_4$ 个数，意思均同上。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行,为复习完毕最短时间。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 2 1 3        </span><br><span class="line">5</span><br><span class="line">4 3</span><br><span class="line">6</span><br><span class="line">2 4 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$1\leq s_1,s_2,s_3,s_4\leq 20$。</p><p>$1\leq A<em>1,A_2,\ldots,A</em>{s<em>1},B_1,B_2,\ldots,B</em>{s<em>2},C_1,C_2,\ldots,C</em>{s<em>3},D_1,D_2,\ldots,D</em>{s_4}\leq60$。</p><p>本题为背包dp的 “ 简单 ” 变式：虽然简单变一变本蒟蒻已经不会了。</p><p>一开始的思路是贪心算法：对每一组而言先排序，然后从后向前把元素往两个空脑子里丢，哪个脑子目前内容比较少就丢哪个。</p><p>代码如下，喜提零分（听取蛙声一片）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxsize = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, inp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">min_time</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> a[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> lsum=<span class="number">0</span>,rsum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(lsum&gt;rsum)rsum+=a[i];</span><br><span class="line">        <span class="keyword">else</span> lsum+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(lsum,rsum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum_time=<span class="number">0</span>,na,nb,nc,nd;</span><br><span class="line">    <span class="type">int</span> a[maxsize],b[maxsize],c[maxsize],d[maxsize];</span><br><span class="line">        cin&gt;&gt;na&gt;&gt;nb&gt;&gt;nc&gt;&gt;nd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;na;i++)</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nb;i++)</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nc; i++)</span><br><span class="line">        cin &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nd; i++)</span><br><span class="line">        cin &gt;&gt; d[i];</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">min_time</span>(a, na) + <span class="built_in">min_time</span>(b, nb) + <span class="built_in">min_time</span>(c, nc) + <span class="built_in">min_time</span>(d, nd) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：以上代码为错误代码！！！！！！！！！</p><p>因为可以找到一组hack数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在某一行：</span><br><span class="line">10 10 6 6 5 3 </span><br></pre></td></tr></table></figure><p>按照贪心算法</p><p>10 6 5</p><p>10 6 3</p><p>max为21</p><p>但是实际上：</p><p>10 10</p><p>6 6 5 3</p><p>max为20</p><p>于是验证了贪心的不可行性，而这种退一步达到全局最优解的情况，就应该使用dp</p><p>这道题使用的是最基本的背包dp。我们由以上思路可以知晓，当两个脑子处理的内容大小最接近 的时候将会达到本组最优解。于是我给第一个脑子一个容量预算为sum/2（即背包容量），在运算过程中不能超过这个预算。通过将每个选择装进背包的物品的v等价于其重量w这种方法，由此得出最大化利用sum/2的背包空间所能装得下的处理总量，即dp[ sum/2 ];</p><p>而max（sum-dp[ sum/2 ]，dp[ sum/2 ]）即为某一组耗时。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dynamic_programming</span><span class="params">(<span class="type">int</span> sum,<span class="type">int</span> homework[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> homework[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> dp[<span class="number">2501</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=sum/<span class="number">2</span>;j&gt;=homework[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j],dp[j-homework[i]]+homework[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(sum - dp[sum / <span class="number">2</span>], dp[sum / <span class="number">2</span>]); </span><br><span class="line">    <span class="comment">// return sum - dp[sum / 2];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外由于int是除以2（在正数范围内）向下取整的特性，可以数学证明sum-dp[ sum/2 ]总是大于dp[ sum/2 ]，所以注释行也还可以那样输出。</p><p>最后，完整代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dynamic_programming</span><span class="params">(<span class="type">int</span> sum,<span class="type">int</span> homework[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> homework[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> dp[<span class="number">2501</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=sum/<span class="number">2</span>;j&gt;=homework[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j],dp[j-homework[i]]+homework[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(sum - dp[sum / <span class="number">2</span>], dp[sum / <span class="number">2</span>]); <span class="comment">// return sum - dp[sum / 2];</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>   b[<span class="number">21</span>] = &#123;<span class="number">0</span>&#125;,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in">sizeof</span>(b));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=a[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;b[j];</span><br><span class="line">            sum+=b[j];</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="built_in">dynamic_programming</span>(sum,b,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kkksc03考前临时抱佛脚&quot;&gt;&lt;a href=&quot;#kkksc03考前临时抱佛脚&quot; class=&quot;headerlink&quot; title=&quot;kkksc03考前临时抱佛脚&quot;&gt;&lt;/a&gt;kkksc03考前临时抱佛脚&lt;/h1&gt;&lt;h2 id=&quot;题目背景&quot;&gt;&lt;a href=&quot;#题</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="背包DP" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85DP/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="背包DP" scheme="https://xqc-1368.github.io/tags/%E8%83%8C%E5%8C%85DP/"/>
    
  </entry>
  
  <entry>
    <title>11 期望DP：收集邮票</title>
    <link href="https://xqc-1368.github.io/2024/08/17/11%20%E6%9C%9F%E6%9C%9BDP%EF%BC%9A%E6%94%B6%E9%9B%86%E9%82%AE%E7%A5%A8/"/>
    <id>https://xqc-1368.github.io/2024/08/17/11%20%E6%9C%9F%E6%9C%9BDP%EF%BC%9A%E6%94%B6%E9%9B%86%E9%82%AE%E7%A5%A8/</id>
    <published>2024-08-17T06:53:17.192Z</published>
    <updated>2024-08-17T14:32:13.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="11期望DP"><a href="#11期望DP" class="headerlink" title="11期望DP"></a>11期望DP</h2><h1 id="收集邮票"><a href="#收集邮票" class="headerlink" title="收集邮票"></a>收集邮票</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n$ 种不同的邮票，皮皮想收集所有种类的邮票。唯一的收集方法是到同学凡凡那里购买，每次只能买一张，并且买到的邮票究竟是 $n$ 种邮票中的哪一种是等概率的，概率均为 $1/n$。但是由于凡凡也很喜欢邮票，所以皮皮购买第 $k$ 次邮票需要支付 $k$ 元钱。</p><p>现在皮皮手中没有邮票，皮皮想知道自己得到所有种类的邮票需要花费的钱数目的期望。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行，一个数字 $N$（$N \le 10000$）。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出要付出多少钱，保留二位小数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21.25</span><br></pre></td></tr></table></figure><ul><li>定义状态</li></ul><p>众所周知，期望DP的定义状态一般都为<strong>已经……还需要……的期望</strong></p><p>由于本题需要求的就是</p><p><em>自己得到所有种类的邮票需要花费的钱数目的期望。</em></p><p>那么我们就可以定义一个 <code>ex</code> ，它的意义是：</p><p>$ex(i)$：已经收集到了 i 种邮票，还需要花费的钱数的期望。</p><p>但是题目中有一个条件</p><p><em>皮皮购买第k张邮票需要支付k元钱</em></p><p>这意味着购买价格是与购买次数有关的。</p><p>所以我们还需要定义一个状态 <code>num</code> ，它的意义是：$num(i)$：</p><p>已经收集到了 <code>i</code>种邮票，还需要购买的次数的期望。</p><ul><li>初始化：$num(n)=0$，$ex(n)=0$</li></ul><p>这个应该不需要我讲吧qwq</p><ul><li>状态转移</li></ul><p>首先吧这个写在前面</p><p>期望公式：$E(X)= \sum pi​⋅xi$​ ，其中 pi​ 是事件 i 发生的概率，xi​ 是权值。</p><p>发现 num 的转移是比较简单的，先考虑 num。有以下两种情况：</p><ul><li><p>买到之前买到过的邮票种类，此时 $x=num(i)+1$（种类总数不变），$p=\frac{i}{n}$​</p></li><li><p>买到之前没有买到过的，此时 $x=num(i+1)+1$（总种类数量+1），$p=\frac{n-i}{n}$​</p></li></ul><p>注：以上的 x 指的是<strong>次数</strong>。</p><p>根据公式，我们就可以得到关于 num 的公式：</p><p>$num(i)=(num(i)+1)×\frac{i}{n}+(num(i+1)+1)×\frac{n-i}{n}$</p><p>化简之后得到状态转移方程：</p><script type="math/tex; mode=display">num(i)= \frac{num(i+1)×\frac{n-i}{n}+1}{1−\frac{n-i}{n}}​</script><p>得到 num 后，我们再思考 ans 的转移，同样是以上的两种情况</p><ul><li><p>买到之前买到过的邮票种类：此时 $x=ex(i)+num(i)+1$（种类+1，总花费=之前花费+本次花费），$p=\frac{i}{n}$</p></li><li><p>买到之前没有买到过的，此时$x=ex(i+1)+num(i+1)+1$（同上），$p=\frac{n-i}{n}$</p></li></ul><p>然后我们又轻松地得到了关于 <code>ex</code> 的公式：</p><p>$ex(i)=(ex(i)+num(i)+1)×\frac{i}{n}​+(ex(i+1)+num(i+1)+1)×​\frac{n-i}{n}$</p><p><del>请自行化简</del></p><p>既然我们有了转移方程，那就开写呗</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> num[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;,ex[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">signed</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    num[n]=<span class="number">0</span>;ex[n]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> p=(<span class="type">double</span>)n/(n-i);</span><br><span class="line">        num[i]=p+num[i+<span class="number">1</span>];</span><br><span class="line">        ex[i]=p*num[i]+ex[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;=n;i++)cout&lt;&lt;num[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;=n;i++)cout&lt;&lt;ex[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,ex[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;ex[0]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;11期望DP&quot;&gt;&lt;a href=&quot;#11期望DP&quot; class=&quot;headerlink&quot; title=&quot;11期望DP&quot;&gt;&lt;/a&gt;11期望DP&lt;/h2&gt;&lt;h1 id=&quot;收集邮票&quot;&gt;&lt;a href=&quot;#收集邮票&quot; class=&quot;headerlink&quot; title=&quot;收</summary>
      
    
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="期望DP" scheme="https://xqc-1368.github.io/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%9F%E6%9C%9BDP/"/>
    
    
    <category term="算法" scheme="https://xqc-1368.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="动态规划" scheme="https://xqc-1368.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="期望DP" scheme="https://xqc-1368.github.io/tags/%E6%9C%9F%E6%9C%9BDP/"/>
    
  </entry>
  
  <entry>
    <title>CSS定位</title>
    <link href="https://xqc-1368.github.io/2024/08/17/09%20CSS%E5%AE%9A%E4%BD%8D/"/>
    <id>https://xqc-1368.github.io/2024/08/17/09%20CSS%E5%AE%9A%E4%BD%8D/</id>
    <published>2024-08-17T02:28:01.411Z</published>
    <updated>2024-08-17T02:19:44.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><blockquote><p><strong>今日目标</strong></p><ul><li>能够说出 为什么要用定位</li><li>能够说出 定位的 4 种分类</li><li>能够说出 4 种定位各自的特点</li><li>能够说出 为什么常用子绝父相布局</li><li>能够写出 淘宝轮播图布局</li><li>能够说出 显示隐藏的 3 种方式以及区别</li></ul></blockquote><h2 id="1-定位-position-介绍"><a href="#1-定位-position-介绍" class="headerlink" title="1. 定位(position) 介绍"></a>1. 定位(position) 介绍</h2><h3 id="1-1-为什么使用定位"><a href="#1-1-为什么使用定位" class="headerlink" title="1.1 为什么使用定位"></a>1.1 为什么使用定位</h3><blockquote><p>我们先来看一个效果，同时思考一下<strong>用标准流或浮动能否实现类似的效果</strong>？</p></blockquote><p><strong>场景1</strong>： 某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子.<br><img src="/images/2024-05-07-10-07-43-image.png" alt=""></p><p><strong>场景2</strong>：当我们滚动窗口的时候，盒子是固定屏幕某个位置的。<br><img src="/images/2024-05-07-10-07-56-image.png" alt=""></p><blockquote><p>结论：要实现以上效果，标准流 或 浮动都无法快速实现</p></blockquote><p>所以：</p><p>1.浮动可以让多个块级盒子一行没有缝隙排列显示， 经常用于横向排列盒子。</p><p>2.定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</p><h3 id="1-2-定位组成"><a href="#1-2-定位组成" class="headerlink" title="1.2 定位组成"></a>1.2 定位组成</h3><p><strong>定位</strong>：将盒子<strong>定</strong>在某一个位置，所以<strong>定位也是在摆放盒子， 按照定位的方式移动盒子</strong></p><p>定位也是用来布局的，它有两部分组成：</p><blockquote><p><strong>定位 = 定位模式 + 边偏移</strong>  </p></blockquote><p><strong>定位模式</strong> 用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p><h4 id="1-2-1-边偏移（方位名词）"><a href="#1-2-1-边偏移（方位名词）" class="headerlink" title="1.2.1 边偏移（方位名词）"></a>1.2.1 边偏移（方位名词）</h4><p><strong>边偏移</strong> 就是定位的盒子移动到最终位置。有 top、bottom、left 和 right  4 个属性。</p><div class="table-container"><table><thead><tr><th>边偏移属性</th><th style="text-align:left">示例</th><th>描述</th></tr></thead><tbody><tr><td><code>top</code></td><td style="text-align:left"><code>top: 80px</code></td><td><strong>顶端</strong>偏移量，定义元素相对于其父元素<strong>上边线的距离</strong>。</td></tr><tr><td><code>bottom</code></td><td style="text-align:left"><code>bottom: 80px</code></td><td><strong>底部</strong>偏移量，定义元素相对于其父元素<strong>下边线的距离</strong>。</td></tr><tr><td><code>left</code></td><td style="text-align:left"><code>left: 80px</code></td><td><strong>左侧</strong>偏移量，定义元素相对于其父元素<strong>左边线的距离</strong>。</td></tr><tr><td><code>right</code></td><td style="text-align:left"><code>right: 80px</code></td><td><strong>右侧</strong>偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr></tbody></table></div><p>定位的盒子有了边偏移才有价值。 一般情况下，凡是有定位地方必定有边偏移。</p><h4 id="1-2-2-定位模式-position"><a href="#1-2-2-定位模式-position" class="headerlink" title="1.2.2 定位模式 (position)"></a>1.2.2 定位模式 (position)</h4><p>在 CSS 中，通过 <code>position</code> 属性定义元素的<strong>定位模式</strong>，语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    <span class="attribute">position</span>: 属性值; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位模式是有不同分类的，在不同情况下，我们用到不同的定位模式。</p><p>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个：</p><div class="table-container"><table><thead><tr><th>值</th><th style="text-align:center">语义</th></tr></thead><tbody><tr><td><code>static</code></td><td style="text-align:center"><strong>静态</strong>定位</td></tr><tr><td><code>relative</code></td><td style="text-align:center"><strong>相对</strong>定位</td></tr><tr><td><code>absolute</code></td><td style="text-align:center"><strong>绝对</strong>定位</td></tr><tr><td><code>fixed</code></td><td style="text-align:center"><strong>固定</strong>定位</td></tr></tbody></table></div><p><img src="/images/2024-05-07-10-08-23-image.png" alt=""></p><h3 id="1-3-定位模式介绍"><a href="#1-3-定位模式介绍" class="headerlink" title="1.3 定位模式介绍"></a>1.3 定位模式介绍</h3><h4 id="1-3-1-静态定位-static-了解"><a href="#1-3-1-静态定位-static-了解" class="headerlink" title="1.3.1.  静态定位(static) - 了解"></a>1.3.1.  静态定位(static) - 了解</h4><ul><li><p><strong>静态定位</strong>是元素的<strong>默认</strong>定位方式，<strong>无定位的意思</strong>。它相当于 border 里面的none，静态定位static，不要定位的时候用。</p></li><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: static; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态定位 按照标准流特性摆放位置，它没有边偏移。</p></li><li><p>静态定位在布局时我们几乎不用的 </p></li></ul><h4 id="1-3-2-相对定位-relative-重要"><a href="#1-3-2-相对定位-relative-重要" class="headerlink" title="1.3.2. 相对定位(relative) - 重要"></a>1.3.2. 相对定位(relative) - 重要</h4><ul><li><strong>相对定位</strong>是元素在移动位置的时候，是相对于它自己<strong>原来的位置</strong>来说的（自恋型）。</li><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: relative; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>相对定位的特点：（务必记住）</p><ul><li><p>1.它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</p></li><li><p>2.<strong>原来</strong>在标准流的<strong>位置</strong>继续占有，后面的盒子仍然以标准流的方式对待它。</p><p>因此，<strong>相对定位并没有脱标</strong>。它最典型的应用是给绝对定位当爹的。。。</p></li></ul></li><li><p>效果图：</p></li></ul><p><img src="/images/2024-05-07-10-08-50-image.png" alt=""></p><h4 id="1-3-3-绝对定位-absolute-重要"><a href="#1-3-3-绝对定位-absolute-重要" class="headerlink" title="1.3.3. 绝对定位(absolute) - 重要"></a>1.3.3. 绝对定位(absolute) - 重要</h4><h5 id="1-3-3-1-绝对定位的介绍"><a href="#1-3-3-1-绝对定位的介绍" class="headerlink" title="1.3.3.1 绝对定位的介绍"></a>1.3.3.1 绝对定位的介绍</h5><ul><li><p><strong>绝对定位</strong>是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的（拼爹型）。</p></li><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: absolute; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p><strong>完全脱标</strong> —— 完全不占位置；  </p></li><li><p><strong>父元素没有定位</strong>，则以<strong>浏览器</strong>为准定位（Document 文档）。<br><img src="/images/2024-05-07-10-09-03-image.png" alt=""></p></li><li><p><strong>父元素要有定位</strong></p><ul><li>元素将依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。<br><img src="/images/2024-05-07-10-09-20-image.png" alt=""></li></ul></li></ol><ul><li><p><strong>绝对定位的特点总结</strong>：（务必记住）</p><p>1.如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>，则以浏览器为基准定位（Document 文档）。</p><p>2.如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置。</p><p>3.绝对定位<strong>不再占有原先的位置</strong>。所以绝对定位是脱离标准流的。（脱标）</p></li></ul><h5 id="1-3-3-2-定位口诀-——-子绝父相"><a href="#1-3-3-2-定位口诀-——-子绝父相" class="headerlink" title="1.3.3.2 定位口诀 —— 子绝父相"></a>1.3.3.2 定位口诀 —— 子绝父相</h5><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p><p>这个<strong>“子绝父相”</strong>太重要了，是我们学习定位的<strong>口诀</strong>，是定位中最常用的一种方式这句话的意思是：<strong>子级是绝对定位的话，父级要用相对定位。</strong></p><p>因为绝对定位的盒子是拼爹的，所以要和父级搭配一起来使用。</p><p>①子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p><p>②父盒子需要加定位限制子盒子在父盒子内显示。</p><p>③父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p><p>这就是子绝父相的由来，所以<strong>相对定位经常用来作为绝对定位的父级</strong>。</p><p>总结： <strong>因为父级需要占有位置，因此是相对定位， 子盒子不需要占有位置，则是绝对定位</strong></p><p>当然，子绝父相不是永远不变的，如果父元素不需要占有位置，<strong>子绝父绝</strong>也会遇到。</p><p><strong>疑问</strong>：为什么在布局时，<strong>子级元素</strong>使用<strong>绝对定位</strong>时，<strong>父级元素</strong>就要用<strong>相对定位</strong>呢？</p><p>观察下图，思考一下在布局时，<strong>左右两个方向的箭头图片</strong>以及<strong>父级盒子</strong>的定位方式。</p><p><img src="/images/2024-05-07-10-09-35-image.png" alt=""></p><p><img src="/images/2024-05-07-10-09-47-image.png" alt=""></p><p><strong>分析</strong>：</p><ol><li><strong>方向箭头</strong>叠加在其他图片上方，应该使用<strong>绝对定位</strong>，因为<strong>绝对定位完全脱标</strong>，完全不占位置。</li><li><strong>父级盒子</strong>应该使用<strong>相对定位</strong>，因为<strong>相对定位不脱标</strong>，后续盒子仍然以标准流的方式对待它。<ul><li>如果父级盒子也使用<strong>绝对定位</strong>，会完全脱标，那么下方的<strong>广告盒子</strong>会上移，这显然不是我们想要的。</li></ul></li></ol><p><strong>结论</strong>：<strong>父级要占有位置，子级要任意摆放</strong>，这就是<strong>子绝父相</strong>的由来。</p><h4 id="1-3-4-固定定位-fixed-重要"><a href="#1-3-4-固定定位-fixed-重要" class="headerlink" title="1.3.4. 固定定位(fixed) - 重要"></a>1.3.4. 固定定位(fixed) - 重要</h4><ul><li><p><strong>固定定位</strong>是元素<strong>固定于浏览器可视区的位置</strong>。（认死理型）   主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</p></li><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: fixed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>固定定位的特点：（务必记住）：</p><p>1.以浏览器的可视窗口为参照点移动元素。</p><ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动。</li></ul><p>2.固定定位<strong>不在占有原先的位置</strong>。</p></li><li><p>固定定位也是<strong>脱标</strong>的，其实<strong>固定定位也可以看做是一种特殊的绝对定位</strong>。（认死理型） </p><ul><li><strong>完全脱标</strong>—— 完全不占位置；</li><li>只认<strong>浏览器的可视窗口</strong> —— <code>浏览器可视窗口 + 边偏移属性</code> 来设置元素的位置；<ul><li>跟父元素没有任何关系；单独使用的</li><li>不随滚动条滚动。</li></ul></li></ul></li></ul><blockquote><p>固定定位举例：</p></blockquote><p><img src="/images/2024-05-07-10-09-59-image.png" alt=""></p><p><strong>提示</strong>：IE 6 等低版本浏览器不支持固定定位。</p><p>小tip：固定在版心右侧</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fixed</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:fixed;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:版面宽度的一半</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-5-粘性定位-sticky-了解"><a href="#1-3-5-粘性定位-sticky-了解" class="headerlink" title="1.3.5 粘性定位(sticky) - 了解"></a>1.3.5 粘性定位(sticky) - 了解</h4><ul><li><p><strong>粘性定位</strong>可以被认为是相对定位和固定定位的混合。 Sticky  粘性的 </p></li><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    position: sticky; </span><br><span class="line">    top: 10px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>粘性定位的特点：</p><p>1.以浏览器的可视窗口为参照点移动元素（固定定位特点）</p><p>2.粘性定位占有原先的位置（相对定位特点）</p><p>3.必须添加 top 、left、right、bottom <strong>其中一个</strong>才有效</p><p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p></li></ul><h4 id="1-3-6-定位总结"><a href="#1-3-6-定位总结" class="headerlink" title="1.3.6 定位总结"></a>1.3.6 定位总结</h4><div class="table-container"><table><thead><tr><th><strong>定位模式</strong></th><th><strong>是否脱标</strong></th><th><strong>移动位置</strong></th><th><strong>是否常用</strong></th></tr></thead><tbody><tr><td>static   静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative 相对定位</strong></td><td><strong>否 (占有位置)</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>基本单独使用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>要和定位父级元素搭配使用</strong></td></tr><tr><td><strong>fixed 固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>单独使用，不需要父级</strong></td></tr><tr><td>sticky 粘性定位</td><td>否   (占有位置)</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table></div><ul><li><p>一定记住 相对定位、固定定位、绝对定位 两个大的特点： 1. 是否占有位置（脱标否） 2. 以谁为基准点移动位置。</p></li><li><p>学习定位重点学会子绝父相。</p></li><li><p>注意：</p></li></ul><ol><li><strong>边偏移</strong>需要和<strong>定位模式</strong>联合使用，<strong>单独使用无效</strong>；</li><li><code>top</code> 和 <code>bottom</code> 不要同时使用；</li><li><code>left</code> 和 <code>right</code> 不要同时使用。</li></ol><h2 id="2-综合案例：学成在线-hot-模块添加"><a href="#2-综合案例：学成在线-hot-模块添加" class="headerlink" title="2. 综合案例：学成在线-hot  模块添加"></a>2. 综合案例：学成在线-hot  模块添加</h2><h3 id="2-1-案例截图："><a href="#2-1-案例截图：" class="headerlink" title="2. 1 案例截图："></a><strong>2. 1 案例截图</strong>：</h3><p><img src="/images/2024-05-07-10-10-10-image.png" alt=""></p><h3 id="2-2-案例分析"><a href="#2-2-案例分析" class="headerlink" title="2.2 案例分析"></a>2.2 案例分析</h3><ol><li>一个大的 <code>li</code> 中包含 一个课程图片，课程介绍文字信息，还有hot的小图标；</li><li>hot图片<strong>重叠</strong>在课程图片上面—— 脱标，不占位置，需要使用<strong>绝对定位</strong>；</li><li>hot图片<strong>重叠</strong>在<strong>li的右上方 —— 需要</strong>使用边偏移确定准确位置。</li></ol><h3 id="2-3-案例小结"><a href="#2-3-案例小结" class="headerlink" title="2.3 案例小结"></a>2.3 案例小结</h3><ol><li><strong>子绝父相</strong> —— <strong>子元素</strong>使用<strong>绝对定位</strong>，<strong>父元素</strong>使用<strong>相对定位</strong>；</li><li><strong>与浮动的对比</strong>：<ul><li><strong>绝对定位</strong>：脱标，<strong>利用边偏移指定准确位置</strong>；</li><li><strong>浮动</strong>：脱标，不能指定准确位置，<strong>让多个块级元素在一行显示</strong>。</li></ul></li></ol><blockquote><p>课堂练习：模拟老师的随堂案例完成<strong>哈根达斯</strong>案例（5 分钟）。</p></blockquote><p>结构修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改.box-bd里面的li标签内容，添加一个hot图标 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 添加hot小图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/hot.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/pic.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">        Think PHP 5.0 博客系统实战项目演练</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>高级<span class="tag">&lt;/<span class="name">span</span>&gt;</span> • 1125人在学习</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式修改：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="comment">/* 子绝父相 */</span></span><br><span class="line">    <span class="comment">/* 父元素相对定位 */</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">228px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">270px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#050505</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-bd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">     <span class="comment">/* 子元素绝对定位 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-定位-position-的应用"><a href="#3-定位-position-的应用" class="headerlink" title="3. 定位(position)的应用"></a>3. 定位(position)的应用</h2><h3 id="3-1-固定定位小技巧：-固定在版心左侧位置。"><a href="#3-1-固定定位小技巧：-固定在版心左侧位置。" class="headerlink" title="3.1.  固定定位小技巧： 固定在版心左侧位置。"></a>3.1.  固定定位小技巧： 固定在版心左侧位置。</h3><p>小算法：</p><p>1.让固定定位的盒子 left: 50%.  走到浏览器可视区（也可以看做版心） 的一半位置。</p><p>2.让固定定位的盒子 margin-left: 版心宽度的一半距离。  多走 版心宽度的一半位置</p><p>就可以让固定定位的盒子<strong>贴着版心右侧对齐</strong>了。<br><img src="/images/2024-05-07-10-10-26-image.png" alt=""></p><p><img src="/images/2024-05-07-10-10-42-image.png" alt=""></p><p>案例效果：</p><p><img src="/images/2024-05-07-10-10-59-image.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.w</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.fixed</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 1. 走浏览器宽度的一半 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 2. 利用margin 走版心盒子宽度的一半距离 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">405px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w&quot;</span>&gt;</span>版心盒子 800像素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-堆叠顺序（z-index）"><a href="#3-2-堆叠顺序（z-index）" class="headerlink" title="3.2. 堆叠顺序（z-index）"></a>3.2. 堆叠顺序（z-index）</h3><ul><li><p>在使用<strong>定位</strong>布局时，可能会<strong>出现盒子重叠的情况</strong>。此时，可以使用 <strong>z-index</strong> 来控制盒子的前后次序 (z轴)</p></li><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; </span><br><span class="line">    z-index: 1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>z-index</code> 的特性如下：</p><ol><li><strong>属性值</strong>：<strong>正整数</strong>、<strong>负整数</strong>或 <strong>0</strong>，默认值是 0，数值越大，盒子越靠上；    </li><li>如果<strong>属性值相同</strong>，则按照书写顺序，<strong>后来居上</strong>；</li><li>数字后面<strong>不能加单位</strong>。</li></ol><p><strong>注意</strong>：<code>z-index</code> 只能应用于<strong>相对定位</strong>、<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，其他<strong>标准流</strong>、<strong>浮动</strong>和<strong>静态定位</strong>无效。</p></li><li><p>应用 <code>z-index</code> 层叠等级属性可以<strong>调整盒子的堆叠顺序</strong>。如下图所示：</p></li></ul><p><img src="/images/2024-05-07-10-11-09-image.png" alt=""></p><blockquote><p>案例演示：堆叠顺序。</p></blockquote><h2 id="4-定位-position-的拓展"><a href="#4-定位-position-的拓展" class="headerlink" title="4. 定位(position)的拓展"></a>4. 定位(position)的拓展</h2><h3 id="4-1-绝对定位的盒子居中：注意不能用margin：0-auto"><a href="#4-1-绝对定位的盒子居中：注意不能用margin：0-auto" class="headerlink" title="4.1 绝对定位的盒子居中：注意不能用margin：0 auto"></a>4.1 绝对定位的盒子居中：注意不能用<code>margin：0 auto</code></h3><blockquote><p><strong>注意</strong>：加了<strong>绝对定位/固定定位的盒子</strong>不能通过设置 <code>margin: auto</code> 设置<strong>水平居中</strong>。</p><p>但是可以通过以下计算方法实现水平和垂直居中，可以按照下图的方法：</p></blockquote><p><img src="/images/2024-05-07-10-11-19-image.png" alt=""></p><ol><li><code>left: 50%;</code>：让<strong>盒子的左侧</strong>移动到<strong>父级元素的水平中心位置</strong>；</li><li><code>margin-left: -100px;</code>：让盒子<strong>向左</strong>移动<strong>自身宽度的一半</strong>。</li></ol><p><strong>盒子居中定位示意图</strong></p><p><img src="/images/2024-05-07-10-11-30-image.png" alt=""></p><h3 id="4-2-定位特殊特性"><a href="#4-2-定位特殊特性" class="headerlink" title="4.2 定位特殊特性"></a>4.2 定位特殊特性</h3><p>绝对定位和固定定位也和浮动类似。</p><p>1.行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</p><p>2.块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p><p>前面我们讲过， display 是 显示模式， 可以改变显示模式有以下方式:</p><ul><li>可以用inline-block  转换为行内块</li><li>可以用浮动 float 默认转换为行内块（类似，并不完全一样，因为浮动是脱标的）</li><li>绝对定位和固定定位也和浮动类似， 默认转换的特性 转换为行内块。</li></ul><p>所以说， 一个行内的盒子，如果加了<strong>浮动</strong>、<strong>固定定位</strong>和<strong>绝对定位</strong>，不用转换，就可以给这个盒子直接设置宽度和高度等。</p><h3 id="4-3-脱标的盒子不会触发外边距塌陷"><a href="#4-3-脱标的盒子不会触发外边距塌陷" class="headerlink" title="4.3 脱标的盒子不会触发外边距塌陷"></a>4.3 脱标的盒子不会触发外边距塌陷</h3><p>浮动元素、<strong>绝对定位(固定定位）</strong>元素的都不会触发外边距合并的问题。 （我们以前是用padding border overflow解决的）</p><p>也就是说，我们给盒子改为了浮动或者定位，就不会有垂直<strong>外边距合并的问题</strong>了。</p><h3 id="4-4-绝对定位（固定定位）会完全压住盒子"><a href="#4-4-绝对定位（固定定位）会完全压住盒子" class="headerlink" title="4.4 绝对定位（固定定位）会完全压住盒子"></a>4.4 绝对定位（固定定位）会完全压住盒子</h3><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p><p>但是绝对定位（固定定位） 会压住下面标准流所有的内容。</p><p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做<u>文字环绕效果</u>的。 文字会围绕浮动元素</p><p><img src="/images/2024-05-07-10-11-40-image.png" alt=""></p><h2 id="5-综合案例-淘宝轮播图-重点"><a href="#5-综合案例-淘宝轮播图-重点" class="headerlink" title="5. 综合案例 - 淘宝轮播图(重点)"></a>5. 综合案例 - 淘宝轮播图(重点)</h2><h3 id="5-1-效果图"><a href="#5-1-效果图" class="headerlink" title="5.1 效果图"></a>5.1 效果图</h3><p><img src="/images/2024-05-07-10-11-48-image.png" alt=""></p><h3 id="5-2-布局分析"><a href="#5-2-布局分析" class="headerlink" title="5.2 布局分析"></a>5.2 布局分析</h3><p><img src="/images/2024-05-07-10-11-56-image.png" alt=""></p><h3 id="5-3-步骤"><a href="#5-3-步骤" class="headerlink" title="5.3 步骤"></a>5.3 步骤</h3><ol><li><p>大盒子我们类名为：  tb-promo      淘宝广告</p></li><li><p>里面先放一张图片。</p></li><li><p>左右两个按钮 用链接就好了。   左箭头 prev    右箭头  next   </p><p>​    左按钮样式（border-radius：左上，右上，右下，左下），</p><p>​    右按钮定位，提取左右按钮共同的样式代码（并集选择器）</p></li><li><p>底侧小圆点ul 继续做。 类名为 promo-nav     </p><p>​    中间长方形椭圆 ul的定位（水平居中，离底部15px）  </p><p>​    长方形需要五个小圆点，ul无序列表，li浮动，椭圆中小圆点的样式</p></li></ol><h3 id="5-4-知识点：圆角矩形设置4个角"><a href="#5-4-知识点：圆角矩形设置4个角" class="headerlink" title="5.4 知识点：圆角矩形设置4个角"></a>5.4 知识点：圆角矩形设置4个角</h3><p>圆角矩形可以为4个角分别设置圆度， 但是是有顺序的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-top-left-radius:20px;</span><br><span class="line">border-top-right-radius:20px;</span><br><span class="line">border-bottom-right-radius:20px;</span><br><span class="line">border-bottom-left-radius:20px;</span><br></pre></td></tr></table></figure><ul><li><p>如果4个角，数值相同</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br></pre></td></tr></table></figure></li><li><p>里面数值不同，我们也可以按照简写的形式，具体格式如下:</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: 左上角 右上角  右下角  左下角;</span><br></pre></td></tr></table></figure><p>还是遵循的顺时针。</p><h3 id="5-5-代码参考"><a href="#5-5-代码参考" class="headerlink" title="5.5 代码参考"></a>5.5 代码参考</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>淘宝轮播图做法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tb-promo</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tb-promo</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">520px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 并集选择器可以集体声明相同的样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.prev</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 绝对定位的盒子垂直居中 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: -<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 加了绝对定位的盒子可以直接设置高度和宽度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.prev</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border-radius: 15px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top-right-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom-right-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 如果一个盒子既有left属性也有right属性，则默认会执行 left属性 同理  top  bottom  会执行 top */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border-radius: 15px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top-left-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom-left-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.promo-nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: -<span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* background-color: pink; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.promo-nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 不要忘记选择器权重的问题 */</span></span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.promo-nav</span> <span class="selector-class">.selected</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ff5000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tb-promo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tb.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧按钮箭头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span> &lt; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 右侧按钮箭头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span> &gt; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 小圆点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;promo-nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-网页布局总结"><a href="#6-网页布局总结" class="headerlink" title="6. 网页布局总结"></a>6. 网页布局总结</h2><p>通过盒子模型，清楚知道大部分html标签是一个盒子。</p><p>通过CSS浮动、定位 可以让每个盒子排列成为网页。</p><p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。</p><h3 id="6-1-标准流"><a href="#6-1-标准流" class="headerlink" title="6.1. 标准流"></a>6.1. 标准流</h3><p>可以让盒子上下排列或者左右排列，<strong>垂直的块级盒子显示就用标准流布局</strong>。</p><h3 id="6-2-浮动"><a href="#6-2-浮动" class="headerlink" title="6.2. 浮动"></a>6.2. 浮动</h3><p>可以让多个块级元素一行显示或者左右对齐盒子，<strong>多个块级盒子水平显示就用浮动布局</strong></p><h3 id="6-3-定位"><a href="#6-3-定位" class="headerlink" title="6.3. 定位"></a>6.3. 定位</h3><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示。<strong>如果元素自由在某个盒子内移动就用定位布局。</strong></p><h2 id="7-元素的显示与隐藏"><a href="#7-元素的显示与隐藏" class="headerlink" title="7. 元素的显示与隐藏"></a>7. 元素的显示与隐藏</h2><ul><li><p>目的（本质）</p><p>​    让一个元素在页面中消失或者显示出来</p></li><li><p>场景</p><p>​    类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p></li></ul><h3 id="7-1-display-显示（重点）"><a href="#7-1-display-显示（重点）" class="headerlink" title="7.1. display 显示（重点）"></a>7.1. display 显示（重点）</h3><ul><li><p>display 设置或检索对象是否及如何显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: none 隐藏对象</span><br><span class="line"></span><br><span class="line">display：block 除了转换为块级元素之外，同时还有显示元素的意思。</span><br></pre></td></tr></table></figure></li><li><p>特点： display 隐藏元素后，<strong>不再占</strong>有原来的位置。</p></li><li><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。实际开发场景：</p><blockquote><p>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p></blockquote></li></ul><p><img src="/images/2024-05-07-10-12-07-image.png" alt=""></p><blockquote></blockquote><h3 id="7-2-visibility-可见性-（了解）"><a href="#7-2-visibility-可见性-（了解）" class="headerlink" title="7.2. visibility 可见性 （了解）"></a>7.2. visibility 可见性 （了解）</h3><ul><li><p>visibility 属性用于指定一个元素应可见还是隐藏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">visibility：visible ; 　元素可视</span><br><span class="line"></span><br><span class="line">visibility：hidden; 　  元素隐藏</span><br></pre></td></tr></table></figure></li><li><p>特点：<strong>visibility 隐藏元素后，继续占有原来的位置</strong>。（停职留薪）</p></li><li><p>如果隐藏元素想要原来位置， 就用 visibility：hidden</p></li><li><p>如果隐藏元素不想要原来位置， 就用 display：none  (用处更多 重点）</p></li></ul><p><img src="/images/2024-05-07-10-12-15-image.png" alt=""></p><h3 id="7-3-overflow-溢出（重点）"><a href="#7-3-overflow-溢出（重点）" class="headerlink" title="7.3. overflow 溢出（重点）"></a>7.3. overflow 溢出（重点）</h3><ul><li>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</li></ul><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>visible</strong></td><td>不剪切内容也不添加滚动条</td></tr><tr><td><strong>hidden</strong></td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td><strong>scroll</strong></td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td><strong>auto</strong></td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table></div><ul><li>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</li><li>但是如果有定位的盒子， 请慎用overflow:hidden  因为它会隐藏多余的部分。</li></ul><p><img src="/images/2024-05-07-10-12-23-image.png" alt=""></p><ul><li>实际开发场景：</li></ul><ol><li>清除浮动</li><li>隐藏超出内容，隐藏掉,  不允许内容超过父盒子。</li></ol><h3 id="7-4-显示与隐藏总结"><a href="#7-4-显示与隐藏总结" class="headerlink" title="7.4. 显示与隐藏总结"></a>7.4. 显示与隐藏总结</h3><div class="table-container"><table><thead><tr><th>属性</th><th>区别</th><th>用途</th></tr></thead><tbody><tr><td><strong>display 显示     （重点）</strong></td><td>隐藏对象，不保留位置</td><td>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td></tr><tr><td><strong>visibility 可见性 （了解）</strong></td><td>隐藏对象，保留位置</td><td>使用较少</td></tr><tr><td><strong>overflow 溢出（重点）</strong></td><td>只是隐藏超出大小的部分</td><td>1. 可以清除浮动  2. 保证盒子里面的内容不会超出该盒子范围</td></tr></tbody></table></div><h2 id="8-综合案例：土豆网鼠标经过显示遮罩"><a href="#8-综合案例：土豆网鼠标经过显示遮罩" class="headerlink" title="8 综合案例：土豆网鼠标经过显示遮罩"></a>8 综合案例：土豆网鼠标经过显示遮罩</h2><h3 id="8-1-效果图"><a href="#8-1-效果图" class="headerlink" title="8.1. 效果图"></a>8.1. 效果图</h3><p><img src="/images/土豆网案例.png" alt=""></p><h3 id="8-2-案例目标"><a href="#8-2-案例目标" class="headerlink" title="8.2. 案例目标"></a>8.2. 案例目标</h3><p>1.练习元素的显示与隐藏</p><p>2.练习元素的定位</p><h3 id="8-3-核心原理"><a href="#8-3-核心原理" class="headerlink" title="8.3. 核心原理"></a>8.3. 核心原理</h3><p>原先半透明的黑色遮罩看不见， 鼠标经过 大盒子，就显示出来。</p><p>遮罩的盒子不占有位置， 就需要用绝对定位 和 display  配合使用。</p><h3 id="8-4-代码参考"><a href="#8-4-代码参考" class="headerlink" title="8.4. 代码参考"></a>8.4. 代码参考</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>仿土豆网显示隐藏遮罩案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">444px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 隐藏遮罩层 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>) <span class="built_in">url</span>(<span class="string">images/arr.png</span>) no-repeat center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 当我们鼠标经过了 土豆这个盒子，就让里面遮罩层显示出来 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 而是显示元素 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tudou&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/tudou.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;今日目标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够说出 为什么要用定位&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="层叠样式表CSS" scheme="https://xqc-1368.github.io/tags/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8CSS/"/>
    
    <category term="网页" scheme="https://xqc-1368.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="CSS绝对定位" scheme="https://xqc-1368.github.io/tags/CSS%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D/"/>
    
    <category term="CSS相对定位" scheme="https://xqc-1368.github.io/tags/CSS%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D/"/>
    
    <category term="CSS定位注意事项" scheme="https://xqc-1368.github.io/tags/CSS%E5%AE%9A%E4%BD%8D%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    
    <category term="CSS子绝父相" scheme="https://xqc-1368.github.io/tags/CSS%E5%AD%90%E7%BB%9D%E7%88%B6%E7%9B%B8/"/>
    
    <category term="CSS元素显示与隐藏" scheme="https://xqc-1368.github.io/tags/CSS%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F/"/>
    
    <category term="CSS溢出处理" scheme="https://xqc-1368.github.io/tags/CSS%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CSS浮动布局</title>
    <link href="https://xqc-1368.github.io/2024/08/17/08%20CSS%20%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80%20float/"/>
    <id>https://xqc-1368.github.io/2024/08/17/08%20CSS%20%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80%20float/</id>
    <published>2024-08-17T02:28:01.400Z</published>
    <updated>2024-08-17T02:11:10.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、浮动"><a href="#一、浮动" class="headerlink" title="一、浮动"></a>一、浮动</h2><h3 id="1、传统网页布局的三种方式"><a href="#1、传统网页布局的三种方式" class="headerlink" title="1、传统网页布局的三种方式"></a>1、传统网页布局的三种方式</h3><p>​    CSS 提供了三种传统布局方式(简单说,就是盒子如何进行排列顺序)：</p><ul><li><p>普通流（标准流）</p></li><li><p>浮动</p></li><li><p>定位</p><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p></li></ul><p>注意：实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p><h3 id="2、标准流（普通流-文档流）"><a href="#2、标准流（普通流-文档流）" class="headerlink" title="2、标准流（普通流/文档流）"></a>2、标准流（普通流/文档流）</h3><p>所谓的标准流:  就是标签按照规定好默认方式排列</p><ol><li>块级元素会独占一行，从上向下顺序排列。常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li><li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。常用元素：span、a、i、em 等 </li></ol><p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p><h3 id="3、为什么需要浮动？"><a href="#3、为什么需要浮动？" class="headerlink" title="3、为什么需要浮动？"></a>3、为什么需要浮动？</h3><p>​        总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p><p>​        浮动最典型的应用：可以让多个块级元素一行内排列显示。</p><h6 id="网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。"><a href="#网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。" class="headerlink" title="网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。"></a>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong>。</h6><h3 id="4、什么是浮动？"><a href="#4、什么是浮动？" class="headerlink" title="4、什么是浮动？"></a>4、什么是浮动？</h3><p>​        float 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">float</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-03-15-56-44-image.png" alt=""></p><h3 id="5、浮动特性"><a href="#5、浮动特性" class="headerlink" title="5、浮动特性"></a>5、浮动特性</h3><p>加了浮动之后的元素,会具有很多特性,需要我们掌握的.</p><p>1、浮动元素会脱离标准流(脱标：浮动的盒子不再保留原先的位置)<br><img src="/images/2024-05-03-15-56-52-image.png" alt=""></p><p>2、浮动的元素会一行内显示并且元素顶部对齐<br><img src="/images/2024-05-03-15-57-06-image.png" alt=""></p><p>注意： </p><p>​        浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p><p>3、浮动的元素会具有行内块元素的特性</p><pre><code>    如果行内元素or块元素有了浮动，则都自动转换为行内块元素</code></pre><p>​        浮动元素的大小根据内容来决定</p><p>​        浮动的盒子中间是没有缝隙的</p><h3 id="6、浮动元素经常和标准流父级搭配使用"><a href="#6、浮动元素经常和标准流父级搭配使用" class="headerlink" title="6、浮动元素经常和标准流父级搭配使用"></a>6、浮动元素经常和标准流父级搭配使用</h3><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p><p>​        先用标准流父元素排列上下位置, 之后内部子元素采取浮动排列左右位置.  符合网页布局第一准侧</p><p><img src="/images/2024-05-03-15-57-20-image.png" alt=""></p><h2 id="二、常见网页布局"><a href="#二、常见网页布局" class="headerlink" title="二、常见网页布局"></a>二、常见网页布局</h2><h3 id="浮动布局注意点"><a href="#浮动布局注意点" class="headerlink" title="浮动布局注意点"></a>浮动布局注意点</h3><p>1、浮动和标准流的父盒子搭配。</p><p>先用标准流的父元素排列上下位置, 之后内部子元素采取浮动排列左右位置</p><p>2、一个元素浮动了，理论上其余的兄弟元素也要浮动。</p><p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动，以防止引起问题。</p><p>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.</p><h2 id="三、清除浮动"><a href="#三、清除浮动" class="headerlink" title="三、清除浮动"></a>三、清除浮动</h2><h3 id="1、为什么需要清除浮动？"><a href="#1、为什么需要清除浮动？" class="headerlink" title="1、为什么需要清除浮动？"></a>1、为什么需要清除浮动？</h3><p>​        由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p><p><img src="/images/2024-05-03-15-57-31-image.png" alt=""></p><h3 id="2、清除浮动本质"><a href="#2、清除浮动本质" class="headerlink" title="2、清除浮动本质"></a>2、清除浮动本质</h3><p>清除浮动的本质是清除浮动元素造成的影响：浮动的子标签无法撑开父盒子的高度</p><p>注意：</p><ul><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</li><li>父级有了高度，就不会影响下面的标准流了</li></ul><h3 id="3、清除浮动样式"><a href="#3、清除浮动样式" class="headerlink" title="3、清除浮动样式"></a>3、清除浮动样式</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;<span class="attribute">clear</span>:属性值;&#125; </span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-03-15-57-40-image.png" alt=""></p><p>我们实际工作中， 几乎只用 clear: both;</p><p>清除浮动的策略是:  闭合浮动. </p><h3 id="4、清除浮动的多种方式"><a href="#4、清除浮动的多种方式" class="headerlink" title="4、清除浮动的多种方式"></a>4、清除浮动的多种方式</h3><p>自动设置父div的高度</p><h4 id="4-1、额外标签法（不常用）"><a href="#4-1、额外标签法（不常用）" class="headerlink" title="4.1、额外标签法（不常用）"></a>4.1、额外标签法（不常用）</h4><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p><p>使用方式：</p><p>​        <u>额外标签法会在浮动元素末尾</u>添加一个空的标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或者其他标签（如<span class="tag">&lt;<span class="name">br</span> /&gt;</span>等）。</span><br></pre></td></tr></table></figure><p>​        优点： 通俗易懂，书写方便</p><p>​        缺点： 添加许多无意义的标签，结构化较差</p><p>​        注意： 要求这个新的空标签必须是块级元素。</p><p>总结:</p><p>​    1、清除浮动本质是?</p><p>​            清除浮动的本质是清除浮动元素脱离标准流造成的影响</p><p>​    2、清除浮动策略是?</p><p>​            闭合浮动.  只让浮动在父盒子内部影响,不影响父盒子外面的其他盒子.</p><p>​    3、额外标签法?</p><p>​            隔墙法, 就是在最后一个浮动的子元素后面添</p><p>​    4、加一个额外标签, 添加 清除浮动样式.</p><p>​            实际工作可能会遇到,但是不常用</p><h4 id="4-2、父级添加-overflow-属性"><a href="#4-2、父级添加-overflow-属性" class="headerlink" title="4.2、父级添加 overflow 属性"></a>4.2、父级添加 overflow 属性</h4><p>可以给父级添加 overflow 属性，将其属性值设置为 hidden、 auto 或 scroll 。</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>:hidden | auto | scroll;</span><br></pre></td></tr></table></figure><p>优点：代码简洁</p><p>缺点：无法显示溢出的部分</p><p>注意：是给父元素添加代码</p><h4 id="4-3、父级添加after伪元素"><a href="#4-3、父级添加after伪元素" class="headerlink" title="4.3、父级添加after伪元素"></a>4.3、父级添加after伪元素</h4><p>:after 方式是额外标签法的升级版。给父元素添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>; </span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">clear</span>: both; </span><br><span class="line">  <span class="attribute">visibility</span>: hidden;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;  <span class="comment">/* IE6、7 专有 */</span> </span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>在父元素里面写成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;原有类 clearfix&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优点：没有增加标签，结构更简单</p><p>缺点：照顾低版本浏览器</p><p>代表网站： 百度、淘宝网、网易等</p><h4 id="4-4、父级添加双伪元素"><a href="#4-4、父级添加双伪元素" class="headerlink" title="4.4、父级添加双伪元素"></a>4.4、父级添加双伪元素</h4><p>给父元素添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">   *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>在父元素里面写成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;原有类 clearfix&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优点：代码更简洁</p><p>缺点：照顾低版本浏览器</p><p>代表网站：小米、腾讯等</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为什么需要清除浮动？</p><ol><li>父级没高度。</li><li>子盒子浮动了。</li><li>影响下面布局了，我们就应该清除浮动了。</li></ol><p><img src="/images/2024-05-03-15-57-56-image.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、浮动&quot;&gt;&lt;a href=&quot;#一、浮动&quot; class=&quot;headerlink&quot; title=&quot;一、浮动&quot;&gt;&lt;/a&gt;一、浮动&lt;/h2&gt;&lt;h3 id=&quot;1、传统网页布局的三种方式&quot;&gt;&lt;a href=&quot;#1、传统网页布局的三种方式&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="前端" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="层叠样式表CSS" scheme="https://xqc-1368.github.io/tags/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8CSS/"/>
    
    <category term="网页" scheme="https://xqc-1368.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="CSS浮动float" scheme="https://xqc-1368.github.io/tags/CSS%E6%B5%AE%E5%8A%A8float/"/>
    
    <category term="CSS清除浮动" scheme="https://xqc-1368.github.io/tags/CSS%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSS盒子模型</title>
    <link href="https://xqc-1368.github.io/2024/08/17/07%20CSS%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%20BoxModel/"/>
    <id>https://xqc-1368.github.io/2024/08/17/07%20CSS%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%20BoxModel/</id>
    <published>2024-08-17T02:28:01.389Z</published>
    <updated>2024-08-17T02:05:56.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、盒子模型"><a href="#一、盒子模型" class="headerlink" title="一、盒子模型"></a>一、盒子模型</h2><h3 id="1、网页布局的本质"><a href="#1、网页布局的本质" class="headerlink" title="1、网页布局的本质"></a>1、网页布局的本质</h3><p>网页布局的核心本质： 就是利用 CSS 摆盒子。</p><p><img src="/images/1571492334739.png" alt="1571492334739"></p><p>网页布局过程：</p><ol><li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li><li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li><li>往盒子里面装内容</li></ol><h3 id="2、盒子模型（Box-Model）组成"><a href="#2、盒子模型（Box-Model）组成" class="headerlink" title="2、盒子模型（Box Model）组成"></a>2、盒子模型（Box Model）组成</h3><p>​        盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p><p>​        CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p><p><img src="/images/1571492536942.png" alt="1571492536942"></p><h3 id="3、边框（border）"><a href="#3、边框（border）" class="headerlink" title="3、边框（border）"></a>3、边框（border）</h3><h4 id="3-1、边框的使用"><a href="#3-1、边框的使用" class="headerlink" title="3.1、边框的使用"></a>3.1、边框的使用</h4><p>1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式  边框颜色；</p><p>2、语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color;   </span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-02-11-15-13-image.png" alt=""></p><p>边框样式 border-style 可以设置如下值：</p><ul><li>none：没有边框即忽略所有边框的宽度（默认值）</li><li>solid：边框为单实线(最为常用的)</li><li>dashed：边框为虚线  </li><li>dotted：边框为点线</li></ul><p>3、边框的合写分写</p><p>边框简写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;  </span><br></pre></td></tr></table></figure><p>边框分开写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red;  <span class="comment">/* 只设定上边框， 其余同理 */</span>   </span><br></pre></td></tr></table></figure><h4 id="3-2、表格的细线边框"><a href="#3-2、表格的细线边框" class="headerlink" title="3.2、表格的细线边框"></a>3.2、表格的细线边框</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">table</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">249px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">table</span>,<span class="selector-tag">td</span>,<span class="selector-tag">th</span>&#123;</span><br><span class="line">        <span class="attribute">border</span>:<span class="number">1px</span> solid pink;</span><br><span class="line">        <span class="attribute">border-collapse</span>:collaspe;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">text-align</span>:center;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p><p>2、语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>:collapse; </span><br></pre></td></tr></table></figure><p>collapse 单词是合并的意思</p><p>border-collapse: collapse;<u> 表示相邻边框合并在一起</u></p><h4 id="3-3、边框会影响盒子实际大小"><a href="#3-3、边框会影响盒子实际大小" class="headerlink" title="3.3、边框会影响盒子实际大小"></a>3.3、边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p><ul><li>测量盒子大小的时候,不量边框。</li><li>如果测量的时候包含了边框,则需要 width/height 减去边框宽度</li></ul><h3 id="4、内边距（padding）"><a href="#4、内边距（padding）" class="headerlink" title="4、内边距（padding）"></a>4、内边距（padding）</h3><h4 id="4-1、内边距的使用方式"><a href="#4-1、内边距的使用方式" class="headerlink" title="4.1、内边距的使用方式"></a>4.1、内边距的使用方式</h4><p>1、padding 属性用于设置内边距，即边框与内容之间的距离。</p><p>2、语法：</p><p>合写属性：</p><p><img src="/images/2024-05-02-11-28-45-image.png" alt=""></p><p>分写属性：</p><p><img src="/images/2024-05-02-11-28-59-image.png" alt=""></p><h4 id="4-2、内边距会影响盒子实际大小"><a href="#4-2、内边距会影响盒子实际大小" class="headerlink" title="4.2、内边距会影响盒子实际大小"></a>4.2、内边距会影响盒子实际大小</h4><p>1、当我们给盒子指定 padding 值之后，发生了 2 件事情：</p><ol><li>内容和边框有了距离，添加了内边距。</li><li>padding影响了盒子实际大小。</li></ol><p>2、内边距对盒子大小的影响：</p><ul><li><u>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</u><br><img src="/images/2024-05-02-11-31-53-image.png" alt=""><br><img src="/images/2024-05-02-11-31-11-image.png" alt=""></li><li>如何盒子<u>本身没有指定width/height属性</u>, 则此时padding不会撑开盒子大小。</li></ul><p>3、解决方案：</p><p>​        如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p><p><strong>利用padding撑开盒子做法：导航栏字数不同时候</strong></p><h3 id="5、外边距（margin）"><a href="#5、外边距（margin）" class="headerlink" title="5、外边距（margin）"></a>5、外边距（margin）</h3><h4 id="5-1、外边距的使用方式"><a href="#5-1、外边距的使用方式" class="headerlink" title="5.1、外边距的使用方式"></a>5.1、外边距的使用方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;<span class="attribute">margin-top</span>:<span class="number">30px</span>;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p><p><img src="/images/2024-05-02-11-59-02-image.png" alt=""></p><h4 id="5-2、外边距典型应用"><a href="#5-2、外边距典型应用" class="headerlink" title="5.2、外边距典型应用"></a>5.2、外边距典型应用</h4><p> 外边距可以让块级盒子水平居中的两个条件：</p><ul><li>盒子必须指定了宽度（width）。</li><li>盒子左右的外边距都设置为 auto 。</li></ul><p>常见的写法，以下三种都可以：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin-left</span>: auto;   <span class="attribute">margin-right</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure><p>注意：以上方法是让块级元素水平居中，<u>行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</u></p><h4 id="5-3、外边距合并"><a href="#5-3、外边距合并" class="headerlink" title="5.3、外边距合并"></a>5.3、外边距合并</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p><p>主要有两种情况:</p><p>1、相邻块元素垂直外边距的合并</p><p>​        当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p><p><img src="/images/2024-05-02-12-08-15-image.png" alt=""></p><p>解决方案：<br>        尽量只给一个盒子添加 margin 值。</p><p>2、嵌套块元素垂直外边距的塌陷</p><p>​        对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p><p><img src="/images/2024-05-02-12-08-28-image.png" alt=""></p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><ul><li>可以为父元素定义上边框。</li><li>```css<br>.father{<pre><code>border:1px solid transparent;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 可以为父元素定义上内边距。</span><br><span class="line">- ```css</span><br><span class="line">  .father&#123;</span><br><span class="line">      padding:1px;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>可以为父元素添加 overflow:hidden。(不会使盒子变大)</li><li>```css<br>.father{<pre><code>overflow:hidden;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 5.4、清除内外边距</span><br><span class="line"></span><br><span class="line">​        网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</span><br><span class="line"></span><br><span class="line">```css</span><br><span class="line"> * &#123;</span><br><span class="line">    padding:0;   /* 清除内边距 */</span><br><span class="line">    margin:0;    /* 清除外边距 */</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>​        注意：<u>行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距</u>。但是转换为块级和行内块元素就可以了</p><h2 id="二、盒子模型的其他样式"><a href="#二、盒子模型的其他样式" class="headerlink" title="二、盒子模型的其他样式"></a>二、盒子模型的其他样式</h2><h3 id="1、圆角边框"><a href="#1、圆角边框" class="headerlink" title="1、圆角边框"></a>1、圆角边框</h3><p>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</p><p>border-radius 属性用于设置元素的外边框圆角。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:length;    </span><br></pre></td></tr></table></figure><ul><li>参数值可以为数值或百分比的形式</li><li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li><li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li><li>分开写：border-top-left-radius、border-top-right-radius、border-bottom-right-radius 和border-bottom-left-radius</li><li>兼容性 ie9+ 浏览器支持, 但是不会影响页面布局,可以放心使用</li></ul><h3 id="2、盒子阴影"><a href="#2、盒子阴影" class="headerlink" title="2、盒子阴影"></a>2、盒子阴影</h3><p>CSS3 中新增了盒子阴影，我们可以使用 box-shadow 属性为盒子添加阴影。<br>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset; </span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-03-15-31-10-image.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> -<span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="3、文字阴影"><a href="#3、文字阴影" class="headerlink" title="3、文字阴影"></a>3、文字阴影</h3><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。<br>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-03-15-37-25-image.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、盒子模型&quot;&gt;&lt;a href=&quot;#一、盒子模型&quot; class=&quot;headerlink&quot; title=&quot;一、盒子模型&quot;&gt;&lt;/a&gt;一、盒子模型&lt;/h2&gt;&lt;h3 id=&quot;1、网页布局的本质&quot;&gt;&lt;a href=&quot;#1、网页布局的本质&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="前端" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="层叠样式表CSS" scheme="https://xqc-1368.github.io/tags/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8CSS/"/>
    
    <category term="网页" scheme="https://xqc-1368.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="CSS文字阴影" scheme="https://xqc-1368.github.io/tags/CSS%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1/"/>
    
    <category term="CSS盒子模型" scheme="https://xqc-1368.github.io/tags/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="CSS边框样式" scheme="https://xqc-1368.github.io/tags/CSS%E8%BE%B9%E6%A1%86%E6%A0%B7%E5%BC%8F/"/>
    
    <category term="CSS内边距padding" scheme="https://xqc-1368.github.io/tags/CSS%E5%86%85%E8%BE%B9%E8%B7%9Dpadding/"/>
    
    <category term="CSS外边距margin" scheme="https://xqc-1368.github.io/tags/CSS%E5%A4%96%E8%BE%B9%E8%B7%9Dmargin/"/>
    
    <category term="CSS清除内外边距" scheme="https://xqc-1368.github.io/tags/CSS%E6%B8%85%E9%99%A4%E5%86%85%E5%A4%96%E8%BE%B9%E8%B7%9D/"/>
    
    <category term="CSS圆角边框" scheme="https://xqc-1368.github.io/tags/CSS%E5%9C%86%E8%A7%92%E8%BE%B9%E6%A1%86/"/>
    
    <category term="CSS盒子阴影" scheme="https://xqc-1368.github.io/tags/CSS%E7%9B%92%E5%AD%90%E9%98%B4%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>CSS显示模式</title>
    <link href="https://xqc-1368.github.io/2024/08/17/06%20CSS%20%E5%85%83%E7%B4%A0%E7%9A%84%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/"/>
    <id>https://xqc-1368.github.io/2024/08/17/06%20CSS%20%E5%85%83%E7%B4%A0%E7%9A%84%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-08-17T02:28:01.364Z</published>
    <updated>2024-08-17T02:37:08.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、css的显示模式"><a href="#一、css的显示模式" class="headerlink" title="一、css的显示模式"></a>一、css的显示模式</h2><h3 id="1、什么是元素的显示模式"><a href="#1、什么是元素的显示模式" class="headerlink" title="1、什么是元素的显示模式"></a>1、什么是元素的显示模式</h3><p><strong>定义：</strong></p><p>​        元素显示模式就是元素（标签）以什么方式进行显示，比如<div>自己占一行，比如一行可以放多个<span>。</p><p><strong>作用：</strong></p><p>​        网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。</p><h3 id="2、元素显示模式的分类"><a href="#2、元素显示模式的分类" class="headerlink" title="2、元素显示模式的分类"></a>2、元素显示模式的分类</h3><h4 id="2-1、块元素"><a href="#2-1、块元素" class="headerlink" title="2.1、块元素"></a>2.1、块元素</h4><p><strong>常见的块元素</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</span><br></pre></td></tr></table></figure><p>​        <div> 标签是最典型的块元素。</p><p><strong>块级元素的特点</strong>：</p><ul><li>比较霸道，自己独占一行。</li><li>高度，宽度、外边距以及内边距都可以控制。</li><li>宽度默认是容器（父级宽度）的100%。</li><li>是一个容器及盒子，里面可以放行内或者块级元素。</li></ul><p><strong>注意：</strong></p><p>​        文字类的元素内不能放块级元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt; 标签主要用于存放文字，因此 &lt;p&gt; 里面不能放块级元素，特别是不能放&lt;div&gt; </span><br><span class="line">同理， &lt;h1&gt;~&lt;h6&gt;等都是文字类块级标签，里面也不能放其他块级元素</span><br></pre></td></tr></table></figure><h4 id="2-2、行内元素"><a href="#2-2、行内元素" class="headerlink" title="2.2、行内元素"></a>2.2、行内元素</h4><p><strong>常见的行内元素：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</span><br></pre></td></tr></table></figure><p>​        <span> 标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p><p><strong>行内元素的特点：</strong></p><ul><li><p>相邻行内元素在一行上，一行可以显示多个。</p></li><li><p>高、宽直接设置是无效的。</p></li><li><p>默认宽度就是它本身内容的宽度。</p></li><li><p>行内元素只能容纳文本或其他行内元素。</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">span</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:hotpink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>        链接里面不能再放链接<br>        特殊情况链接 <code>&lt;a&gt;</code> 里面可以放块级元素，但是给 <code>&lt;a&gt;</code> 转换一下块级模式最安全</p><h4 id="2-3、行内块元素"><a href="#2-3、行内块元素" class="headerlink" title="2.3、行内块元素"></a>2.3、行内块元素</h4><p><strong>常见的行内块标签</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</span><br></pre></td></tr></table></figure><p>​        它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。</p><p><strong>行内块元素的特点</strong>：</p><ul><li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。</li><li>一行可以显示多个（行内元素特点）。</li><li>默认宽度就是它本身内容的宽度（行内元素特点）。</li><li>高度，行高、外边距以及内边距都可以控制（块级元素特点）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">input</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">250px</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">39px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="2-4、元素显示模式总结"><a href="#2-4、元素显示模式总结" class="headerlink" title="2.4、元素显示模式总结"></a>2.4、元素显示模式总结</h4><p><img src="/images/2024-05-01-20-39-53-image.png" alt=""></p><p>​        学习元素显示模式的主要目的就是分清它们各自的特点，当我们网页布局的时候，在合适的地方用合适的标签元素。</p><h3 id="3、元素显示模式的转换"><a href="#3、元素显示模式的转换" class="headerlink" title="3、元素显示模式的转换"></a>3、元素显示模式的转换</h3><p><strong>简单理解</strong>: </p><p>​        一个模式的元素需要另外一种模式的特性<br>​        比如想要增加链接 <code>&lt;a&gt;</code> 的触发范围。   </p><p><strong>转换方式</strong></p><ul><li>转换为块元素：display:block;</li><li>转换为行内元素：display:inline;</li><li>转换为行内块：display: inline-block;</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>:pink;</span><br><span class="line">        <span class="attribute">display</span>:block;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:purple;</span><br><span class="line">        <span class="attribute">display</span>:inline;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">span</span>&#123;</span><br><span class="line">       <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">       <span class="attribute">width</span>:<span class="number">30px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>:blue;</span><br><span class="line">       <span class="attribute">display</span>:inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-01-19-19-45-image.png" alt=""></p><p>案例，小米侧边栏</p><p><img src="/images/2024-05-01-19-31-21-image.png" alt=""></p><h3 id="4、单行文字垂直居中的代码"><a href="#4、单行文字垂直居中的代码" class="headerlink" title="4、单行文字垂直居中的代码"></a>4、单行文字垂直居中的代码</h3><p><strong>解决方案</strong>:    </p><p>​        <u>让文字的行高等于盒子的高度  就可以让文字在当前盒子内垂直居中</u><br><img src="/images/2024-05-01-19-33-21-image.png" alt=""></p><p>实现：</p><p><code>line-height:40px;</code></p><p><img src="/images/2024-05-01-19-33-37-image.png" alt=""></p><p><strong>简单理解</strong>: </p><p>​        行高的上空隙和下空隙把文字挤到中间了，</p><p>​        如果行高小于盒子高度,文字会偏上，</p><p>​        如果行高大于盒子高度,则文字偏下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、css的显示模式&quot;&gt;&lt;a href=&quot;#一、css的显示模式&quot; class=&quot;headerlink&quot; title=&quot;一、css的显示模式&quot;&gt;&lt;/a&gt;一、css的显示模式&lt;/h2&gt;&lt;h3 id=&quot;1、什么是元素的显示模式&quot;&gt;&lt;a href=&quot;#1、什么是元素的显</summary>
      
    
    
    
    <category term="前端" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="层叠样式表CSS" scheme="https://xqc-1368.github.io/tags/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8CSS/"/>
    
    <category term="网页" scheme="https://xqc-1368.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="CSS显示模式" scheme="https://xqc-1368.github.io/tags/CSS%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="CSS块元素" scheme="https://xqc-1368.github.io/tags/CSS%E5%9D%97%E5%85%83%E7%B4%A0/"/>
    
    <category term="CSS行内元素" scheme="https://xqc-1368.github.io/tags/CSS%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0/"/>
    
    <category term="CSS行内块元素" scheme="https://xqc-1368.github.io/tags/CSS%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器</title>
    <link href="https://xqc-1368.github.io/2024/08/17/05%20CSS%20%E9%80%89%E6%8B%A9%E5%99%A8%20Selector/"/>
    <id>https://xqc-1368.github.io/2024/08/17/05%20CSS%20%E9%80%89%E6%8B%A9%E5%99%A8%20Selector/</id>
    <published>2024-08-17T02:28:01.343Z</published>
    <updated>2024-08-17T01:57:46.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、选择器分类"><a href="#一、选择器分类" class="headerlink" title="一、选择器分类"></a>一、选择器分类</h2><p>基本语法架构：</p><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明</p><p>CSS声明总是以分号 <code>;</code> 结束，声明总以大括号 <code>&#123;&#125;</code> 括起来:<br><img src="/images/2024-03-16-15-09-28-image.png" alt=""></p><p>选择器通常是您需要改变样式的 HTML 元素。</p><p>每条声明由一个属性和一个值组成。</p><p>属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。</p><ol><li><p>标签选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类选择器</p><p>class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。</p><p>class 选择器在 HTML 中以 class 属性表示, 在 CSS 中，类选择器以一个点 . 号显示：</p><p>在以下的例子中，所有拥有 center 类的 HTML 元素均为居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在标签里面加上：class=&quot;nounderline gray&quot;就可以用了        </span><br></pre></td></tr></table></figure><p>你也可以指定特定的 HTML 元素使用 class。</p><p>在以下实例中, 所有的 p 元素使用 class=”center” 让该元素的文本居中:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><ol><li><p>id选择器</p><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p><p>HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。</p><p>以下的样式规则应用于元素属性 id=”para1”:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#para1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通配符选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    属性<span class="number">1</span>：属性值<span class="number">1</span> ;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、css的复合选择器"><a href="#二、css的复合选择器" class="headerlink" title="二、css的复合选择器"></a>二、css的复合选择器</h2></li></ol><h3 id="1、什么是复合选择器？"><a href="#1、什么是复合选择器？" class="headerlink" title="1、什么是复合选择器？"></a>1、什么是复合选择器？</h3><p>​        在 CSS 中，可以根据选择器的类型把选择器分为<strong><em>基础选择器</em></strong>和<strong><em>复合选择器</em></strong>，复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。<br>​        复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的，可以更准确、更高效的选择目标元素（标签）<br>​        常用的复合选择器包括：<strong>后代选择器、子选择器、并集选择器、伪类选择器</strong>等等</p><h3 id="2、后代选择器-重要）"><a href="#2、后代选择器-重要）" class="headerlink" title="2、后代选择器 (重要）"></a>2、后代选择器 (重要）</h3><p><strong>定义：</strong></p><p>​        后代选择器又称为包含选择器，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><p><strong>语法：</strong>(在head里面)</p><p><img src="/images/2024-05-01-11-47-00-image.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>:pink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span>为class名</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:yellow;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>​        上述语法表示选择元素 1 里面的所有元素 2 (后代元素)。</p><p><strong>语法说明</strong>：</p><ul><li>元素1 和 元素2 中间用空格隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是元素2</li><li>元素2 可以是儿子，也可以是孙子等，只要是元素1 的后代即可</li><li>元素1 和 元素2 可以是任意基础选择器</li></ul><h3 id="3、子选择器-重要）"><a href="#3、子选择器-重要）" class="headerlink" title="3、子选择器 (重要）"></a>3、子选择器 (重要）</h3><p><strong>定义：</strong></p><p>​        子元素选择器（子选择器）<strong>只能选择作为某元素的最近一级子元素</strong>。</p><p>​        （简单理解就是选亲儿子元素）</p><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.nav</span>&gt;<span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-01-11-56-31-image.png" alt=""></p><p>​        上述语法表示选择元素1 里面的所有直接后代(子元素) 元素2。</p><p><strong>语法说明</strong>：</p><ul><li>元素1 和 元素2 中间用 大于号 隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是元素2</li><li>元素2 必须是亲儿子，其孙子、重孙之类都不归他管. 你也可以叫他 亲儿子选择器</li></ul><p><strong>例子：</strong></p><p><img src="/images/2024-05-01-11-56-45-image.png" alt=""></p><h3 id="4、并集选择器-重要）"><a href="#4、并集选择器-重要）" class="headerlink" title="4、并集选择器 (重要）"></a>4、并集选择器 (重要）</h3><p><strong>定义：</strong></p><p>​        并集选择器可以选择多组标签, 同时为他们定义相同的样式，通常用于集体声明。并集选择器是各选择器通过英文逗号（,）连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:pink;</span><br><span class="line">    &#125;</span><br><span class="line">或者</span><br><span class="line">    <span class="selector-tag">div</span>,</span><br><span class="line">    <span class="selector-tag">p</span>,</span><br><span class="line">    <span class="selector-class">.pig</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-01-12-00-36-image.png" alt=""></p><p>​        上述语法表示选择元素1 和 元素2。</p><p><strong>语法说明</strong>：</p><ul><li>元素1 和 元素2 中间用逗号隔开</li><li>逗号可以理解为和的意思</li><li>并集选择器通常用于集体声明</li></ul><p><strong>例子：</strong></p><p><img src="/images/2024-05-01-12-00-48-image.png" alt=""></p><h3 id="5、伪类选择器"><a href="#5、伪类选择器" class="headerlink" title="5、伪类选择器"></a>5、伪类选择器</h3><p><strong>定义：</strong></p><p>​        伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p><p><strong>语法：</strong></p><p>​        伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p><h3 id="6、链接伪类选择器"><a href="#6、链接伪类选择器" class="headerlink" title="6、链接伪类选择器"></a>6、链接伪类选择器</h3><p><strong>定义：</strong></p><p>​        伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素。</p><p><strong>语法：</strong>（请按照LVHA顺序书写，不能换序）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#333</span></span><br><span class="line">        text-decoration:none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:orange;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:green;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>​        伪类选择器书写最大的特点是用冒号（:）表示，比如 :hover 、 :first-child 。</p><p>​        a:link    没有点击过的(访问过的)链接<br>​        a:visited    点击过的(访问过的)链接<br>​        a:hover    鼠标经过的那个链接<br>​        a:active    鼠标正在按下还没有弹起鼠标的那个链接</p><p><strong>链接伪类选择器注意事项</strong></p><p>​        为了确保生效，请按照 LVHA 的循顺序声明 :link－:visited－:hover－:active。</p><p>​        记忆法：love hate 或者 lv 包包 hao 。</p><p>​        因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>链接伪类选择器实际工作开发中的写法</strong>：(重要)</p><p><img src="/images/2024-05-01-12-06-35-image.png" alt=""></p><h3 id="7、-focus-伪类选择器"><a href="#7、-focus-伪类选择器" class="headerlink" title="7、:focus 伪类选择器"></a>7、:focus 伪类选择器</h3><p><strong>定义：</strong></p><p>​        :focus 伪类选择器用于选取获得焦点的表单元素。</p><p>​        焦点就是光标，一般情况 <input> 类表单元素才能获取</p><p>例子：</p><p><img src="/images/2024-05-01-12-12-12-image.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:pink;</span><br><span class="line">        <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h3><p><img src="/images/2024-05-01-20-40-38-image.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、选择器分类&quot;&gt;&lt;a href=&quot;#一、选择器分类&quot; class=&quot;headerlink&quot; title=&quot;一、选择器分类&quot;&gt;&lt;/a&gt;一、选择器分类&lt;/h2&gt;&lt;p&gt;基本语法架构：&lt;/p&gt;
&lt;p&gt;CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="层叠样式表CSS" scheme="https://xqc-1368.github.io/tags/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8CSS/"/>
    
    <category term="网页" scheme="https://xqc-1368.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="CSS选择器" scheme="https://xqc-1368.github.io/tags/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS复合选择器" scheme="https://xqc-1368.github.io/tags/CSS%E5%A4%8D%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS伪元素选择器" scheme="https://xqc-1368.github.io/tags/CSS%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS链接伪类选择器" scheme="https://xqc-1368.github.io/tags/CSS%E9%93%BE%E6%8E%A5%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS属性选择器" scheme="https://xqc-1368.github.io/tags/CSS%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS类选择器" scheme="https://xqc-1368.github.io/tags/CSS%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS标签选择器" scheme="https://xqc-1368.github.io/tags/CSS%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSSID选择器" scheme="https://xqc-1368.github.io/tags/CSSID%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS通配符选择器" scheme="https://xqc-1368.github.io/tags/CSS%E9%80%9A%E9%85%8D%E7%AC%A6%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS后代选择器" scheme="https://xqc-1368.github.io/tags/CSS%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS子选择器" scheme="https://xqc-1368.github.io/tags/CSS%E5%AD%90%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
    <category term="CSS并集选择器" scheme="https://xqc-1368.github.io/tags/CSS%E5%B9%B6%E9%9B%86%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSS背景</title>
    <link href="https://xqc-1368.github.io/2024/08/17/04%20CSS%20%E8%83%8C%E6%99%AF%20background/"/>
    <id>https://xqc-1368.github.io/2024/08/17/04%20CSS%20%E8%83%8C%E6%99%AF%20background/</id>
    <published>2024-08-17T02:28:01.319Z</published>
    <updated>2024-08-17T01:54:26.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景基础"><a href="#一、背景基础" class="headerlink" title="一、背景基础"></a>一、背景基础</h2><p>CSS 背景属性用于定义HTML元素的背景。</p><p>CSS 属性定义背景效果:</p><ul><li>background-color</li></ul><p>background-color 属性定义了元素的背景颜色，页面的背景颜色使用在body的选择器中:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:<span class="number">#b0c4de</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="二、css的背景样式"><a href="#二、css的背景样式" class="headerlink" title="二、css的背景样式"></a>二、css的背景样式</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。<br>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p><h3 id="1、背景颜色"><a href="#1、背景颜色" class="headerlink" title="1、背景颜色"></a>1、背景颜色</h3><p><strong>样式名称</strong>：</p><p>​        background-color 定义元素的背景颜色</p><p><strong>使用方式</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:颜色值;</span><br></pre></td></tr></table></figure><p><strong>其他说明</strong>：</p><p>​        元素背景颜色默认值是 transparent（透明）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:transparent;</span><br></pre></td></tr></table></figure><h3 id="2、背景图片"><a href="#2、背景图片" class="headerlink" title="2、背景图片"></a>2、背景图片</h3><p><strong>样式名称</strong>：</p><p>​        background-image  定义元素的背景图片</p><p><strong>使用方式</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">images/logo.png</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-01-19-42-16-image.png" alt=""></p><p><strong>其他说明</strong>：</p><p>​        实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置. (精灵图也是一种运用场景)</p><p>​        注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径<strong>不要加引号</strong>。</p><h3 id="3、背景平铺"><a href="#3、背景平铺" class="headerlink" title="3、背景平铺"></a>3、背景平铺</h3><p><strong>样式名称：</strong></p><p>​        background-repeat 设置元素背景图像的平铺 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>:repeat|no-repeat|repeat-x|repeat-y</span><br></pre></td></tr></table></figure><p><strong>使用方式：</strong></p><p><img src="/images/2024-05-01-19-46-47-image.png" alt=""></p><p><img src="/images/2024-05-01-19-47-14-image.png" alt=""></p><h3 id="4、背景图片位置"><a href="#4、背景图片位置" class="headerlink" title="4、背景图片位置"></a>4、背景图片位置</h3><p><strong>样式名称：</strong></p><p>​        background-position 属性可以改变图片在背景中的位置</p><p><strong>使用方式：</strong></p><p>​  <img src="/images/2024-05-01-19-47-52-image.png" alt="">      </p><p>​        参数代表的意思是：x 坐标和 y 坐标。 可以使用 方位名词 或者 精确单位</p><p><img src="/images/2024-05-01-19-49-06-image.png" alt=""></p><p><strong>其他说明：</strong></p><p>1、参数是方位名词</p><p>​        如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left  top 和 top  left 效果一致</p><p>​        如果只指定了一个方位名词，另一个值省略，则<u>第二个值默认居中对齐</u></p><p>2、参数是精确单位</p><p>​        如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</p><p>​        如果只指定一个数值，<u>那该数值一定是 x 坐标</u>，另一个默认垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>-poisition:<span class="number">20px</span> <span class="number">50px</span>;</span><br></pre></td></tr></table></figure><p>3、参数是混合单位</p><p>​        如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</p><p>wzry成长守护平台案例</p><p><img src="/images/2024-05-01-19-55-15-image.png" alt=""></p><p>虞姬皮肤全屏背景案例</p><p><img src="/images/2024-05-01-19-57-57-image.png" alt=""></p><h3 id="5、背景图片固定"><a href="#5、背景图片固定" class="headerlink" title="5、背景图片固定"></a>5、背景图片固定</h3><p><strong>样式名称：</strong></p><p>​        background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p><p><strong>使用方式：</strong></p><p>​ <img src="/images/2024-05-01-20-25-10-image.png" alt=""></p><p><strong>其他说明：</strong></p><p>​        background-attachment 后期可以制作视差滚动的效果。</p><h3 id="6、背景样式合写"><a href="#6、背景样式合写" class="headerlink" title="6、背景样式合写"></a>6、背景样式合写</h3><p><strong>背景合写样式：</strong></p><p>​        background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p><p><strong>使用方式：</strong></p><p><img src="/images/2024-05-01-20-25-27-image.png" alt=""></p><h3 id="7、背景色半透明"><a href="#7、背景色半透明" class="headerlink" title="7、背景色半透明"></a>7、背景色半透明</h3><p>CSS3 提供了背景颜色半透明的效果。 </p><p><strong>使用方式：</strong></p><p><img src="/images/2024-05-01-20-25-39-image.png" alt=""></p><ul><li>最后一个参数是 alpha 透明度，取值范围在 0~1之间</li><li>我们习惯把 0.3 的 0 省略掉，写为 background: rgba(0, 0, 0, .3);</li></ul><p><strong>注意</strong>：</p><ul><li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>CSS3 新增属性，是 IE9+ 版本浏览器才支持的，但是现在实际开发,我们不太关注兼容性写法了,可以放心使用</li></ul><h3 id="8、背景总结"><a href="#8、背景总结" class="headerlink" title="8、背景总结"></a>8、背景总结</h3><p><img src="/images/2024-05-01-20-28-39-image.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、背景基础&quot;&gt;&lt;a href=&quot;#一、背景基础&quot; class=&quot;headerlink&quot; title=&quot;一、背景基础&quot;&gt;&lt;/a&gt;一、背景基础&lt;/h2&gt;&lt;p&gt;CSS 背景属性用于定义HTML元素的背景。&lt;/p&gt;
&lt;p&gt;CSS 属性定义背景效果:&lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="层叠样式表CSS" scheme="https://xqc-1368.github.io/tags/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8CSS/"/>
    
    <category term="网页" scheme="https://xqc-1368.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="CSS背景" scheme="https://xqc-1368.github.io/tags/CSS%E8%83%8C%E6%99%AF/"/>
    
    <category term="CSS背景平铺" scheme="https://xqc-1368.github.io/tags/CSS%E8%83%8C%E6%99%AF%E5%B9%B3%E9%93%BA/"/>
    
    <category term="CSS背景图片位置" scheme="https://xqc-1368.github.io/tags/CSS%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E4%BD%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>CSS字体</title>
    <link href="https://xqc-1368.github.io/2024/08/17/03%20CSS%20%E5%AD%97%E4%BD%93%20font/"/>
    <id>https://xqc-1368.github.io/2024/08/17/03%20CSS%20%E5%AD%97%E4%BD%93%20font/</id>
    <published>2024-08-17T02:28:01.297Z</published>
    <updated>2024-08-17T01:55:51.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、CSS-字体"><a href="#一、CSS-字体" class="headerlink" title="一、CSS 字体"></a>一、CSS 字体</h2><p>CSS字体属性定义字体，加粗，大小，文字样式。</p><div class="table-container"><table><thead><tr><th>Property</th><th>描述</th></tr></thead><tbody><tr><td>font</td><td>在一个声明中设置所有的字体属性</td></tr><tr><td>font-family</td><td>指定文本的字体系列</td></tr><tr><td>font-size</td><td>指定文本的字体大小</td></tr><tr><td>font-style</td><td>指定文本的字体样式</td></tr><tr><td>font-variant</td><td>以小型大写字体或者正常字体显示文本。</td></tr><tr><td>font-weight</td><td>指定字体的粗细。</td></tr></tbody></table></div><ol><li><p>字体系列</p><p>font-family 属性设置文本的字体系列。</p><p>font-family 属性应该设置几个字体名称作为一种”后备”机制，如果浏览器不支持第一种字体，他将尝试下一种字体。</p><p><strong>注意</strong>: 如果字体系列的名称超过一个字，它必须用引号，如Font Family：”宋体”。</p><p>多个字体系列是用一个逗号分隔指明：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-family</span>:<span class="string">&quot;Times New Roman&quot;</span>, Times, serif;&#125;</span><br></pre></td></tr></table></figure></li><li><p>字体样式</p><p>主要是用于指定斜体文字的字体样式属性。</p><p>这个属性有三个值：</p><ul><li>正常 - 正常显示文本</li><li>斜体 - 以斜体字显示的文字</li><li>倾斜的文字 - 文字向一边倾斜（和斜体非常类似，但不太支持）字体大小</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;<span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.italic</span> &#123;<span class="attribute">font-style</span>:italic;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.oblique</span> &#123;<span class="attribute">font-style</span>:oblique;&#125;<span class="comment">/*没什么用*/</span></span><br></pre></td></tr></table></figure></li><li><p>字体大小</p><p>font-size 属性设置文本的大小。</p><p>能否管理文字的大小，在网页设计中是非常重要的。但是，你不能通过调整字体大小使段落看上去像标题，或者使标题看上去像段落。</p><p>绝对大小：</p><ul><li>设置一个指定大小的文本</li><li>不允许用户在所有浏览器中改变文本大小</li><li>确定了输出的物理尺寸时绝对大小很有用</li></ul><p>相对大小：</p><ul><li>相对于周围的元素来设置大小</li><li><p>允许用户在浏览器中改变文字大小</p><p>如果你不指定一个字体的大小，默认大小和普通文本段落一样，是16像素（16px=1em）。</p></li></ul><p>设置字体大小像素(绝对大小):</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">font-size</span>:<span class="number">40px</span>;&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span><br></pre></td></tr></table></figure><p>用em来设置字体大小(相对大小):</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">font-size</span>:<span class="number">2.5em</span>;&#125;</span><br></pre></td></tr></table></figure></li><li><p>font-weight 属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;<span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thick</span> &#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thicker</span> &#123;<span class="attribute">font-weight</span>:<span class="number">900</span>;&#125;</span><br></pre></td></tr></table></figure><p>属性值</p><p>| 值                                                                  | 描述                                                 |<br>| ————————————————————————————————— | ————————————————————————— |<br>| normal                                                             | 默认值。定义标准的字符。                                       |<br>| bold                                                               | 定义粗体字符。                                            |<br>| bolder                                                             | 定义更粗的字符。                                           |<br>| lighter                                                            | 定义更细的字符。                                           |<br>| 100<br> 200<br> 300<br> 400<br> 500<br> 600<br> 700<br> 800<br>900 | 定义由细到粗的字符。<br/>400 等同于 normal，<br/>而 700 等同于 bold。 |<br>| inherit                                                            | 规定应该从父元素继承字体的粗细。                                   |</p></li><li><p>font复合属性</p><p>font 简写属性在一个声明中设置所有字体属性。</p><p>可设置的属性是（按顺序）： “<code>font-style</code> <del>font-variant</del> <code>font-weight</code> <code>font-size/line-height</code> <code>font-family</code>“</p><p>font-size和font-family的值是必需的。如果缺少了其他值，默认值将被插入，如果有默认值的话。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.ex1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">font</span>:<span class="number">15px</span> arial,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.ex2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">font</span>:italic bold <span class="number">12px</span>/<span class="number">30px</span> Georgia, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、CSS-文本格式"><a href="#二、CSS-文本格式" class="headerlink" title="二、CSS 文本格式"></a>二、CSS 文本格式</h2><ol><li><p>文本颜色</p><p>颜色属性被用来设置文字的颜色。</p><p>颜色是通过CSS最经常的指定：</p><ul><li>十六进制值 - 如: <strong>＃FF0000</strong></li><li>一个RGB值 - 如: <strong>RGB(255,0,0)</strong></li><li>颜色的名称 - 如: <strong>red</strong></li></ul><p>参阅 <a href="https://www.runoob.com/cssref/css-colors-legal.html">CSS 颜色值</a> 查看完整的颜色值。</p><p>一个网页的背景颜色是指在主体内的选择：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:<span class="number">#00ff00</span>;&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本的对齐方式</p><p>文本排列属性是用来设置文本的水平对齐方式。</p><p>文本可居中或对齐到左或右,两端对齐.</p><p>当text-align设置为”justify”，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.date</span> &#123;<span class="attribute">text-align</span><span class="selector-pseudo">:right</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.main</span> &#123;<span class="attribute">text-align</span>:justify;&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本修饰</p><p>text-decoration 属性用来设置或删除文本的装饰。</p><p>从设计的角度看 text-decoration属性<strong>主要是用来删除链接的下划线</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">text-decoration</span>:none;&#125;</span><br></pre></td></tr></table></figure><p>也可以这样装饰文字：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">text-decoration</span>:overline;&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">text-decoration</span>:line-through;&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;<span class="attribute">text-decoration</span>:underline;&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本转换</p><p>文本转换属性是用来指定在一个文本中的大写和小写字母。</p><p>可用于所有字句变成大写或小写字母，或每个单词的首字母大写。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.uppercase</span> &#123;<span class="attribute">text-transform</span>:uppercase;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.lowercase</span> &#123;<span class="attribute">text-transform</span>:lowercase;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.capitalize</span> &#123;<span class="attribute">text-transform</span>:capitalize;&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本缩进</p><p>文本缩进属性是用来指定文本的第一行的缩进。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">text-indent</span>:<span class="number">50px</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="三、文字阴影"><a href="#三、文字阴影" class="headerlink" title="三、文字阴影"></a>三、文字阴影</h2></li></ol><p>在 CSS3 中，我们可以使用 text-shadow 属性将阴影应用于文本。<br>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><p><img src="/images/2024-05-03-15-37-25-image.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、CSS-字体&quot;&gt;&lt;a href=&quot;#一、CSS-字体&quot; class=&quot;headerlink&quot; title=&quot;一、CSS 字体&quot;&gt;&lt;/a&gt;一、CSS 字体&lt;/h2&gt;&lt;p&gt;CSS字体属性定义字体，加粗，大小，文字样式。&lt;/p&gt;
&lt;div class=&quot;table-</summary>
      
    
    
    
    <category term="前端" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="层叠样式表CSS" scheme="https://xqc-1368.github.io/tags/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8CSS/"/>
    
    <category term="网页" scheme="https://xqc-1368.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="CSS文本格式属性" scheme="https://xqc-1368.github.io/tags/CSS%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F%E5%B1%9E%E6%80%A7/"/>
    
    <category term="CSS文本修饰" scheme="https://xqc-1368.github.io/tags/CSS%E6%96%87%E6%9C%AC%E4%BF%AE%E9%A5%B0/"/>
    
    <category term="CSS文本对齐" scheme="https://xqc-1368.github.io/tags/CSS%E6%96%87%E6%9C%AC%E5%AF%B9%E9%BD%90/"/>
    
    <category term="CSS文字阴影" scheme="https://xqc-1368.github.io/tags/CSS%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1/"/>
    
    <category term="CSS字体font" scheme="https://xqc-1368.github.io/tags/CSS%E5%AD%97%E4%BD%93font/"/>
    
  </entry>
  
  <entry>
    <title>CSS配套工具</title>
    <link href="https://xqc-1368.github.io/2024/08/17/02%20CSS%20%E9%85%8D%E5%A5%97%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7emmet%EF%BC%8CPS/"/>
    <id>https://xqc-1368.github.io/2024/08/17/02%20CSS%20%E9%85%8D%E5%A5%97%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7emmet%EF%BC%8CPS/</id>
    <published>2024-08-17T02:28:01.281Z</published>
    <updated>2024-08-17T01:45:51.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、emmet语法"><a href="#一、emmet语法" class="headerlink" title="一、emmet语法"></a>一、emmet语法</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>​        Emmet语法的前身是Zen coding,它使用缩写,来提高html/css的编写速度, Vscode内部已经集成该语法。</p><p>作用：</p><p>​        快速生成HTML结构语法</p><p>​        快速生成CSS样式语法</p><h3 id="2、快速生成HTML结构语法"><a href="#2、快速生成HTML结构语法" class="headerlink" title="2、快速生成HTML结构语法"></a>2、快速生成HTML结构语法</h3><ul><li>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成<code>&lt;div&gt;&lt;/div&gt;</code></li><li>如果想要生成多个相同标签  加上 <em> 就可以了 比如   div</em>3  就可以快速生成3个div</li><li>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</li><li>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </li><li>如果生成带有<code>类名</code>或者<code>id名字</code>的，  直接写  .demo  或者  #two   tab 键就可以了</li><li>如果生成的div 类名是有顺序的， 可以用 自增符号  $ </li><li>如果想要在生成的标签内部写内容可以用  { }  表示</li></ul><h3 id="3、快速生成CSS样式语法"><a href="#3、快速生成CSS样式语法" class="headerlink" title="3、快速生成CSS样式语法"></a>3、快速生成CSS样式语法</h3><p>CSS 基本采取简写形式即可</p><p>​        比如 w200   按tab  可以 生成  width: 200px;</p><p>​        比如 lh26px   按tab  可以生成  line-height: 26px;</p><h3 id="4、快速格式化代码"><a href="#4、快速格式化代码" class="headerlink" title="4、快速格式化代码"></a>4、快速格式化代码</h3><p>Vscode  快速格式化代码:   shift+alt+f</p><p>也可以设置 当我们 保存页面的时候自动格式化代码:</p><p>1）文件 ———.&gt;【首选项】—————&gt;【设置】；</p><p>2）搜索emmet.include;</p><p>3）在settings.json下的【工作区设置】中添加以下语句：</p><p>​        “editor.formatOnType”: true,</p><p>​        “editor.formatOnSave”: true</p><h2 id="二、PS-基本操作"><a href="#二、PS-基本操作" class="headerlink" title="二、PS 基本操作"></a>二、PS 基本操作</h2><p>​        因为网页美工大部分效果图都是利用 PS（Photoshop）来做的，所以以后我们大部分切图工作都是在 PS 里面完成。</p><p>​        部分操作：</p><ul><li>文件→打开 ：可以打开我们要测量的图片</li><li>Ctrl+R：可以打开标尺，或者 视图→标尺</li><li>右击标尺，把里面的单位改为像素</li><li>Ctrl+ 加号(+)可以放大视图， Ctrl+ 减号(-)可以缩小视图</li><li>按住空格键，鼠标可以变成小手，拖动 PS 视图</li><li>用选区拖动  可以测量大小</li><li>Ctrl+ D 可以取消选区，或者在旁边空白处点击一下也可以取消选区</li></ul><p><img src="/images/2024-05-02-12-12-17-image.png" alt=""></p><h2 id="三、PS-切图"><a href="#三、PS-切图" class="headerlink" title="三、PS 切图"></a>三、PS 切图</h2><h3 id="1、图层切图"><a href="#1、图层切图" class="headerlink" title="1、图层切图"></a>1、图层切图</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最简单的切图方式：右击图层 → 导出 → 切片。</span><br></pre></td></tr></table></figure><h3 id="2、切片切图"><a href="#2、切片切图" class="headerlink" title="2、切片切图"></a>2、切片切图</h3><p>2.1、利用切片选中图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用切片工具手动划出</span><br></pre></td></tr></table></figure><p>2.2、导出选中的图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件菜单 → 存储为 web 设备所用格式 → 选择我们要的图片格式 → 存储 。</span><br></pre></td></tr></table></figure><h3 id="3、PS插件切图"><a href="#3、PS插件切图" class="headerlink" title="3、PS插件切图"></a>3、PS插件切图</h3><p>​        Cutterman 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 “导出 web 所用格式” 以及使用切片工具进行挨个切图的繁琐流程。</p><p>官网：<a href="http://www.cutterman.cn/zh/cutterman">http://www.cutterman.cn/zh/cutterman</a></p><p>注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本。</p><p><img src="/images/2024-05-03-15-58-07-image.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、emmet语法&quot;&gt;&lt;a href=&quot;#一、emmet语法&quot; class=&quot;headerlink&quot; title=&quot;一、emmet语法&quot;&gt;&lt;/a&gt;一、emmet语法&lt;/h2&gt;&lt;h3 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="前端" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="层叠样式表CSS" scheme="https://xqc-1368.github.io/tags/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8CSS/"/>
    
    <category term="网页" scheme="https://xqc-1368.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="emmet" scheme="https://xqc-1368.github.io/tags/emmet/"/>
    
    <category term="PS" scheme="https://xqc-1368.github.io/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>CSS简介</title>
    <link href="https://xqc-1368.github.io/2024/08/17/01%20CSS%20%E6%B3%A8%E9%87%8A%EF%BC%8C%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%EF%BC%8C%E4%B8%89%E7%A7%8D%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    <id>https://xqc-1368.github.io/2024/08/17/01%20CSS%20%E6%B3%A8%E9%87%8A%EF%BC%8C%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%EF%BC%8C%E4%B8%89%E7%A7%8D%E6%A0%B7%E5%BC%8F%E8%A1%A8/</id>
    <published>2024-08-17T02:27:57.504Z</published>
    <updated>2024-08-17T02:32:33.313Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CSS</strong> (Cascading Style Sheets，层叠样式表），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言，<strong>CSS</strong> 文件扩展名为 .css。</p><h2 id="一、CSS-注释"><a href="#一、CSS-注释" class="headerlink" title="一、CSS 注释"></a>一、CSS 注释</h2><p>注释是用来解释你的代码，并且可以随意编辑它，浏览器会忽略它。</p><p>CSS注释以 /<em> 开始, 以 </em>/ 结束, 实例如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这是个注释*/</span> </span><br><span class="line"><span class="comment">/*这是另一个注释*/</span></span><br></pre></td></tr></table></figure><h2 id="二、css三大特性"><a href="#二、css三大特性" class="headerlink" title="二、css三大特性"></a>二、css三大特性</h2><h3 id="1、层叠性"><a href="#1、层叠性" class="headerlink" title="1、层叠性"></a>1、层叠性</h3><p>​        相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题</p><p>​        层叠性原则:</p><ul><li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><p><img src="/images/2024-05-02-10-42-23-image.png" alt=""></p><h3 id="2、继承性"><a href="#2、继承性" class="headerlink" title="2、继承性"></a>2、继承性</h3><p>​        CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。</p><p><img src="/images/2024-05-02-10-42-34-image.png" alt=""></p><p>子元素可以继承父元素的样式：</p><p>​    （text-，font-，line-这些元素开头的可以继承，以及color属性）</p><p>继承性口诀：龙生龙，凤生凤，老鼠生的孩子会打洞</p><p>行高的继承性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行高可以跟单位也可以不跟单位</li><li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li><li>此时子元素的行高是：当前子元素的文字大小 * 1.5</li><li>body 行高 1.5  这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li></ul><h3 id="3、优先级"><a href="#3、优先级" class="headerlink" title="3、优先级"></a>3、优先级</h3><p>当同一个元素指定多个选择器，就会有优先级的产生。</p><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，则根据选择器权重执行</li></ul><p>选择器优先级计算表格：</p><p><img src="/images/2024-05-02-10-44-06-image.png" alt=""><br><img src="/images/2024-05-02-10-45-12-image.png" alt=""></p><p>优先级注意点:</p><ol><li><p>权重是有4组数字组成,但是不会有进位。</p></li><li><p>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..</p></li><li><p>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</p></li><li><p>可以简单记忆法:  通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.</p></li><li><p>继承的权重是0， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</p></li></ol><h4 id="a链接浏览器默认制定了一个样式：蓝色下划线-a-color-blue-因此需要手动指定样式"><a href="#a链接浏览器默认制定了一个样式：蓝色下划线-a-color-blue-因此需要手动指定样式" class="headerlink" title="a链接浏览器默认制定了一个样式：蓝色下划线  a {color:blue;}因此需要手动指定样式"></a>a链接浏览器默认制定了一个样式：蓝色下划线  <code>a &#123;color:blue;&#125;</code>因此需要手动指定样式</h4><p>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。</p><p>权重虽然可以叠加，但是不存在进位</p><ul><li>div ul  li   ———&gt;      0,0,0,3</li><li>.nav ul li   ———&gt;      0,0,1,2</li><li>a:hover      ——-—&gt;   0,0,1,1</li><li>.nav a       ———&gt;      0,0,1,1</li></ul><p>案例1：继承权重为0<br><img src="/images/2024-05-02-11-00-23-image.png" alt=""></p><p>案例2：权重叠加<br><img src="/images/2024-05-02-10-58-58-image.png" alt=""></p><h2 id="三、CSS-三种样式表"><a href="#三、CSS-三种样式表" class="headerlink" title="三、CSS 三种样式表"></a>三、CSS 三种样式表</h2><p>当读到一个样式表时，浏览器会根据它来格式化 HTML 文档。</p><p> 如何插入样式表？</p><p>插入样式表的方法有三种:</p><ul><li><p>外部样式表(External style sheet)</p></li><li><p>内部样式表(Internal style sheet)</p></li><li><p>内联样式(Inline style)</p></li></ul><ol><li><p>外部样式表</p><p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 标签链接到样式表。 标签在（文档的）头部：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;<span class="selector-tag">text</span>/css&quot; href=&quot;mystyle<span class="selector-class">.css</span>&quot;&gt;</span><br><span class="line"><span class="comment">/*href后面跟css文件路径*/</span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li><li><p>内部样式表</p><p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <code>&lt;style&gt;</code> 标签在文档头部定义内部样式表，就像这样:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">hr &#123;<span class="attribute">color</span>:sienna;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>);&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li><li><p>内联样式（行内样式）</p><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。</p><p>要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> style=&quot;<span class="attribute">color</span>:sienna;<span class="attribute">margin-left</span>:<span class="number">20px</span><span class="string">&quot;&gt;这是一个段落。&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; (Cascading Style Sheets，层叠样式表），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言，&lt;strong&gt;CSS&lt;/strong&gt; 文件扩展名为 .css。</summary>
      
    
    
    
    <category term="前端" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://xqc-1368.github.io/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="层叠样式表CSS" scheme="https://xqc-1368.github.io/tags/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8CSS/"/>
    
    <category term="网页" scheme="https://xqc-1368.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="CSS注释" scheme="https://xqc-1368.github.io/tags/CSS%E6%B3%A8%E9%87%8A/"/>
    
    <category term="CSS的插入" scheme="https://xqc-1368.github.io/tags/CSS%E7%9A%84%E6%8F%92%E5%85%A5/"/>
    
    <category term="CSS优先级问题" scheme="https://xqc-1368.github.io/tags/CSS%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
